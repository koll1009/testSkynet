#include <stdio.h>
#include <endian.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>

#include "crypto.h"

void printBytes(const unsigned char *buf, int len, const char *pre, const char *post)
{
    if (pre)
    {
        printf("%s", pre);
    }
    for (int i = 0; i < len; ++i)
    {
        printf("%02x", buf[i]);
    }
    if (post)
    {
        printf("%s", post);
    }
}

void printChars(const unsigned char *buf, int len, const char *pre, const char *post)
{
    if (pre)
    {
        printf("%s", pre);
    }

    const unsigned char* pChar = buf;
    const unsigned char* pTmp = 0;
    int i, j;

    printf("=======================================================================\n");

    while(len)
    {
        printf("%04lx: ",(unsigned long)(pChar - buf));

        pTmp = pChar;
        for (j = 0; j < 16; j++)
        {
            printf("%02X", (unsigned char) (*pChar++));
            if (! --len)
            {
                break;
            }
            j == 7 ? printf("-") : printf(" ");
        }

        for (i = 0; i <= 3 * (15 - j); i++)
        {
            printf(" ");
        }

        printf(" ");
        while (pTmp < pChar)
        {
            if (*pTmp >= 32 && *pTmp <= 126)
                printf("%c", *pTmp);
            else
                printf(".");

            pTmp++;
        }

        printf("\n");
    }
    printf("=======================================================================\n");

    if (post)
    {
        printf("%s", post);
    }
}

typedef enum Direction_T
{
    DI_UPLINK = 0,
    DI_DOWNLINK
} Direction;

typedef struct Packet_T
{
    const char *buffer;
    int         bufferLen;
    Direction   direction;
    const char *desc;
} Packet;

const char fb000_u[] = {0xca,0xfa,0xce,0xb0,0x00,0x55,0x09,0x25,0x27,0xcd,0xae,0x14,0x28,0xbd,0x08,0x25,0x27,0xcd,0xae,0x14,0x28,0xbd,0x00,0x44,0xba,0x48,0x90,0x5a,0xa3,0x55,0x67,0xbb,0x7e,0x83,0x4e,0x08,0x63,0x66,0xc2,0x0a,0x8e,0x7e,0x87,0x40,0x55,0x41,0xf8,0x5c,0x56,0xd4,0xeb,0xd8,0xc5,0x47,0x4c,0x5d,0xbd,0x4b,0xf3,0xc8,0xdb,0x71,0xe0,0x3a,0x8d,0xdb,0x20,0x50,0x99,0xe4,0xb4,0x51,0x6b,0xed,0x43,0x97,0x23,0xf9,0xe1,0x39,0x8e,0xc7,0x6a,0x50,0x36,0x8c,0x87,0x2d,0xce,0xa4,0xf6,0xc7,0x80,0x19,0xfc,0x1f,0x19,0x61,0x93,0xf7,0xe9,0x95,0x6c,0xbe,0xe6,0x54,0xd8,0x0c,0xfe,0xe6,0x02,0xf7,0x71,0x66,0xd5,0x73,0x9a,0xd9,0x2b,0xac,0xee,0x5f,0x9d,0xe4,0xd6,0x32,0x3b,0x64,0xa8,0x28,0x8e,0x0e,0x73,0x4d,0x42,0xeb,0x80,0xea,0x16,0xa7,0xf9,0x7b,0x1e,0x60,0x1e,0xd8,0xf6,0x21,0x4d,0x55,0xdb,0x72,0xf4,0xfc,0xb8,0xaa,0xf8,0x06,0x25,0x62,0x97,0xc2,0xce,0x03,0x17,0x9e,0x2f,0x97,0xd5,0x6a,0x52,0x68,0x4a,0x0d,0xbd,0x71,0xb6,0xf2,0x55,0x4d,0xdd,0xe1,0x2d,0x5d,0xb5,0x4b,0x51,0x7a,0x38,0x5e,0x1a,0x8f,0xdd,0x75,0x3b,0xfd,0xc1,0x0b,0x3e,0x00,0x43,0x81,0x05,0xe6,0x8e,0xf8,0x24,0x0e,0x11,0xf5,0xfd,0x62,0x6c,0x8f,0x61,0x79,0x7e,0x8f,0xfe,0x29,0x5b,0xa9,0xda,0x42,0x92,0xde,0x04,0x6a,0x44,0x6c,0xeb,0xd7,0x87,0xd8,0x32,0x8b,0x8f,0xa1,0x9d,0x3b,0xff,0x2a,0x57,0x6e,0xe0,0xb1,0xa3,0x8f,0x18,0x0b,0x20,0x19,0x80,0x0e,0x8b,0x55,0x71,0x30,0x8c,0x4b,0x90,0x54,0x67,0x0e,0xe0,0xa6,0x55,0xf8,0x44,0x38,0x3d,0xc7,0x4a,0xe3,0x42,0xbd,0xbe,0x1a,0xdc,0x58,0x1a,0x77,0x6c,0x64,0x89,0xb6,0xaa,0x91,0xde,0x4b,0x4a,0x1d,0x67,0x39,0xb8,0xc7,0xeb,0x30,0xdf,0xca,0x7c,0xd8,0xa2,0xa0,0x8b,0xc1,0x18,0xab,0xc0,0x5c,0x4d,0xa9,0x94,0x47,0xd8,0xea,0xdd,0x60,0x53,0x41,0x2b,0xb4,0xf6,0xac,0xd9,0x8e,0xad,0x44,0x6b,0x22,0xde,0x56,0xf2,0x97,0x42,0x1b,0x1d,0xa2,0xb2,0xae,0xa3,0xe1,0x4f,0x80,0x9f,0x55,0x4b,0x95,0x0c,0x50,0xd5,0x62,0x47,0xe7,0x16,0xc1,0x8b,0x83,0x14,0x01,0x02,0x28,0x97,0x8e,0x86,0x30,0xc8,0x31,0x6d,0x03,0xa8,0x94,0x20,0xdf,0xe0,0x6d,0xec,0xbd,0x7e,0x8a,0x32,0x98,0x83,0xc3,0x87,0x70,0xdb,0x47,0x7e,0x69,0xd8,0x57,0x7f,0x9e,0xc3,0xd4,0x80,0xae,0x29,0x86,0x4f,0xa6,0xf7,0xea,0xfe,0xeb,0x94,0xe7,0xd8,0x7c,0xf6,0x7b,0xb6,0x8c,0xc9,0x50,0xe8,0x33,0x41,0x95,0xa0,0x90,0x53,0x2e,0xdb,0x5c,0xc5,0x08,0x4c,0xb6,0xf5,0xf8,0x01,0x18,0x0a,0x94,0x65,0x2b,0xde,0xb0,0x6e,0xa6,0x8f,0xdb,0xd0,0xc5,0xd8,0xca,0x42,0x34,0x9a,0xb2,0x6c,0x51,0x27,0xdd,0x06,0xf7,0x6d,0x86,0xda,0x42,0xb5,0xad,0xa5,0x5f,0x97,0x62,0xda,0x74,0xa1,0x2c,0x74,0xdd,0xb5,0x88,0xfe,0x86,0x68,0x25,0xbd,0x6a,0xf5,0xf4,0xd7,0xd2,0xf7,0xd2,0xf2,0xa4,0xc3,0xa7,0x27,0x48,0xbb,0x25,0x01,0x9f,0xd5,0xb1,0x40,0xc1,0xdf,0xe1,0x83,0xfd,0xf1,0x7f,0x0d,0xf5,0x9a,0xeb,0xb1,0x71,0x0e,0x07,0xf5,0x9f,0x39,0x3b,0x93,0xbb,0xae,0xd6,0x73,0x77,0x89,0xc2,0x14,0x34,0xb2,0xe2,0x71,0x4a,0xe1,0xd4,0x0b,0xce,0x4d,0x57,0xc1,0x41,0xe1,0x83,0xaf,0x69,0x2d,0x67,0xfc,0x78,0x18,0x3e,0x62,0x45,0x9b,0xb9,0xf6,0x91,0xfd,0x0e,0x7d,0xc5,0xb1,0x5c,0x39,0x6c,0x8d,0x18,0xf9,0x1e,0x92,0x16,0x2c,0x87,0x66,0xf2,0x50,0xe1,0x89,0x34,0x8f,0x2f,0xc7,0x64,0x60,0xa2,0xec,0xf8,0x22,0x5e,0x95,0x75,0x19,0x03,0x71,0x10,0xe9,0x43,0x27,0xa2,0x86,0x0a,0x4b,0xb6,0x9c,0x74,0xe1,0xfe,0xb9,0x10,0xbb,0x82,0xec,0xdd,0xe9,0xc8,0x4b,0xcc,0xcf,0xe7,0xe4,0xf6,0xec,0xe2,0xdd,0x44,0x87,0xee,0xdf,0x08,0x33,0x47,0x5c,0x7e,0xf3,0x15,0x19,0x46,0xea,0x98,0xe2,0x21,0xb5,0x67,0xbf,0x6f,0x81,0x7d,0x74,0xda,0xb3,0x11,0x63,0x70,0x2c,0x24,0xfd,0xf4,0x33,0xc9,0x70,0x21,0xba,0xfe,0x13,0x77,0xe4,0xd4,0x9b,0xf6,0xd2,0x2a,0x92,0x31,0x37,0xd9,0xef,0xa4,0x51,0x6d,0x1f,0x70,0x95,0xa6,0xa9,0x4e,0xab,0xa8,0x6c,0x60,0xe7,0x7b,0xa2,0x2f,0xbb,0x91,0x40,0x49,0x44,0x9f,0x38,0x8a,0xa7,0xf1,0xc8,0x3b,0x38,0x90,0xd4,0xdb,0xb6,0x49,0xaa,0x28,0xac,0x74,0xeb,0xd6,0x7a,0x55,0xf9,0xff,0x50,0x45,0x9c,0x8d,0x7a,0xaa,0xe0,0x5f,0x59,0x3d,0x3b,0x51,0x76,0x9d,0xac,0xa9,0x62,0x4d,0x8c,0x01,0x50,0x44,0x48,0x47,0x95,0xe5,0x78,0x5c,0x97,0xef,0x6e,0xf2,0xae,0xa4,0xa3,0x2e,0x5d,0xb3,0xda,0xc8,0xd3,0x0d,0xbc,0x63,0x94,0xd8,0x8e,0x93,0x6f,0x53,0x85,0x0b,0xfa,0x61,0x5d,0x36,0xb8,0x51,0x40,0x7b,0xad,0xed,0x36,0x6c,0xc5,0x7b,0xe5,0x95,0xf7,0xb8,0x87,0xd4,0xf5,0xb3,0x21,0x2d,0x9d,0x00,0xd8,0x06,0xee,0x51,0x0f,0xdb,0x89,0x9a,0x2a,0x3e,0x4b,0x1a,0xd1,0xd8,0x71,0xa5,0xe1,0x72,0x9e,0xc8,0x74,0x48,0xab,0x27,0x75,0x4b,0x11,0x94,0xda,0x22,0xec,0x51,0x7d,0x60,0xf5,0x37,0x60,0xd8,0x94,0xfb,0xdd,0xce,0x68,0x4a,0x15,0xa9,0xcc,0x40,0xae,0x5f,0x46,0xe8,0x69,0xb2,0x22,0xc3,0xa8,0x6b,0x88,0xbc,0x6c,0xa3,0x5c,0x14,0x3c,0x78,0xa5,0x3f,0x1c,0xae,0xb2,0xd9,0x07,0x04,0xa7,0x26,0x32,0x00,0x59,0x01,0xf7,0xe9,0xf9,0x0b,0xac,0x87,0x45,0xd5,0x14,0xab,0x0f,0xb1,0xc6,0x86,0xd4,0x9c,0x60,0x4d,0x65,0xe3,0xb0,0xe4,0x75,0xe7,0x0b,0x2d,0x1e,0x8a,0xc1,0x42,0x9d,0x43,0x99,0x60,0x7b,0x47,0xfe,0x3c,0x92,0x56,0x11,0x03,0x01,0xeb,0x2e,0x9c,0x5c,0xe4,0x57,0xc2,0x80,0xfa,0xaa,0xee,0xe8,0x69,0x7e,0xad,0x13,0xdd,0x23,0x3a,0x67,0x62,0x01,0x91,0x89,0x45,0xbd,0x5d,0x29,0x09,0x94,0x35,0xcf,0xea,0x35,0x9d,0x57,0xd2,0xc5,0xb5,0xa5,0x91,0xe0,0x39,0x7d,0xa7,0x16,0x82,0x0a,0xa0,0x78,0xb8,0x7d,0x0c,0xc0,0x8b,0xfe,0x60,0x91,0x9f,0x08,0x96,0x21,0x82,0x7b,0x01,0xea,0xa6,0x32,0x38,0x13,0xf5,0x97,0x2a,0xef,0x31,0xbe,0xb7,0x96,0xbd,0xae,0x3b,0xd1,0x23,0xfb,0x5a,0x93,0x5d,0x37,0x24,0xdc,0x08,0xfe,0xd5,0xeb,0x17,0xf0,0xe0,0xd3,0xfa,0x68,0xbf,0x6d,0xf9,0x65,0xef,0x23,0x11,0x35,0xae,0x33,0x56,0x61,0x0f,0x09,0xe9,0xa9,0xc5,0x3a,0x48,0x26,0xd6,0x66,0xf0,0xab,0x25,0x94,0xcc,0xf5,0x68,0x5b,0x41,0xf4,0xdb,0xfa,0xf3,0xf2,0xfd,0x86,0x0c,0x35,0x4a,0x8d,0xef,0x63,0xce,0x42,0x7b,0xe5,0x6e,0xf4,0x6f,0xd2,0x0d,0x3e,0xb0,0x32,0xdd,0xda,0x05,0xd5,0x3e,0xc9,0xce,0x12,0x00,0x80,0x18,0x00,0xde,0xce,0xed,0x25,0x6e,0x13,0x49,0x92,0x25,0x41,0x6f,0xd7,0xf3,0xec,0xdf,0xf4,0x25,0x0a,0x1b,0xae,0x0f,0x2e,0xf2,0xfe,0x41,0x40,0x16,0xea,0xf7,0xea,0x83,0x9d,0x54,0x67,0x50,0xb9,0x34,0xc2,0xc2,0xef,0xa3,0x80,0x18,0xee,0x0f,0x2d,0x94,0x08,0x7a,0xb1,0x26,0xb0,0x63,0x2b,0xf9,0x3d,0x4d,0x1f,0xd9,0x13,0x3a,0x6d,0xc0,0xf0,0xda,0xb1,0xde,0xcf,0xdd,0xbc,0x64,0x24,0x94,0xb8,0xf8,0x68,0xeb,0x70,0x7b,0xfc,0xd2,0x09,0xb9,0xdf,0x4a,0x89,0x79,0x88,0x41,0x2a,0x38,0xd7,0x2d,0x8a,0x6a,0x58,0x5a,0xdf,0x1b,0x32,0x20,0xa5,0xc5,0xe9,0xdd,0x3f,0xe1,0x48,0x4b,0xf6,0x8d,0x84,0x64,0xfb,0x49,0x53,0x8f,0xbc,0xa2,0xf0,0xc6,0xac,0xca,0xa8,0xd2,0x4d,0x78,0xad,0x3d,0x4b,0xdd,0xf2,0x9a,0x9e,0x49,0xb1,0x1a,0x7a,0x78,0xa5,0xe3,0x90,0x5c,0xe8};
const char fb001_u[] = {0xc4,0xfa,0xce,0xb0,0x01,0x08,0x8b,0xcd,0xa3,0x51,0x5b,0xe1,0x68,0xff,0x00,0x00,0x44,0xbe,0xb2,0x66,0xc6,0x56,0x4b,0x0e,0xb7,0x6f,0x0a,0x61,0xfc,0xb5,0x46,0xc3,0x8b,0x7f,0x4e,0x6b,0xe2,0x12,0x54,0xcb,0x39,0xa5,0x39,0x77,0xc4,0x50,0x04,0x66,0x49,0x29,0x5c,0x46,0x0c,0x8c,0xb5,0x25,0x6f,0x0c,0x60,0x4c,0xa8,0xe5,0xe6,0x32,0xeb,0xc7,0x95,0xdf,0x5c,0x91,0xcf,0x9d,0xb8,0xdb,0x51,0xd1,0xad,0xbf,0xfa,0x2e,0x68,0x1c,0x46,0x46,0xb2,0xa4,0xe2,0x63,0x22,0xe2,0x43,0xe5,0x19,0xe5,0xc0,0xeb,0xea,0xe2,0x3f,0x5f,0x02,0x3e,0x18,0x94,0x7d,0xc1,0x55,0xb4,0x28,0xff,0x71,0x23,0x23,0x77,0x65,0x6d,0x4e,0x63,0x50,0x5f,0xc2,0x67,0xb2,0xce,0xdd,0x4d,0xa4,0x3d,0xd3,0xe4,0xe9,0x68,0x6b,0x94,0x33,0xab,0x60,0x70,0xcd,0x23,0x2b,0x14,0x93,0x74,0x71,0xa1,0x37,0x84,0x81,0xfa,0x75,0x8e,0x70,0x2f,0xd5,0x78,0x90,0xde,0x66,0xce,0x24,0x42,0xf4,0x90,0xca,0x43,0xc4,0xb1,0xc7,0x84,0x68,0x18,0xd0,0xb5,0x56,0x4c,0xbd,0xf5,0xe5,0x57,0xc9,0x23,0x19,0xd6,0x35,0x31,0xff,0xce,0x20,0xd8,0xd5,0x72,0x58,0x3c,0xeb,0x56,0xe9,0x1f,0x47,0xec,0x4c,0x4d,0x9b,0xf0,0x9c,0x2a,0xf5,0x38,0x69,0x57,0xf8,0xe8,0x87,0x1e,0x7b,0x8e,0xc8,0x89,0x5e,0x4d,0xfd,0x4f,0xf1,0xbf,0xb5,0xa9,0x9b,0x15,0x9e,0xe3,0x9f,0x35,0x2d,0xa5,0x97,0x18,0xe3,0x41,0xa4,0x1c,0x49,0x66,0x66,0x7a,0x2d,0x9a,0xb7,0x19,0xc0,0x13,0xfb,0x69,0x27,0x2f,0xcd,0xbe,0xcc,0x15,0xb8,0x29,0xe1,0x36,0x37,0xa1,0xf4,0x96,0x3c,0x44,0xc5,0x57,0x3e,0xe1,0x63,0x9a,0x1d,0xee,0xfa,0xa4,0xd2,0xb2,0x02,0x77,0x38,0x4a,0xdc,0x60,0x07,0x91,0x11,0x50,0x0c,0xc3,0x66,0x51,0x66,0x0a,0x7a,0xce,0x1f,0x16,0xf0,0x2b,0x17,0x38,0x29,0x9a,0x85,0x17,0xaf,0x02,0x8a,0xee,0xa9,0x5e,0xb1,0xb4,0x4a,0xc7,0xd6,0xc3,0x7b,0x55,0x51,0xd1,0x36,0xdc,0xea,0xc8,0x63,0x5f,0xf1,0xa1,0xed,0x1f,0x26,0x10,0xbc,0x9d,0x55,0x0f,0x1c,0xd6,0xa3,0x23,0x85,0x15,0x6b,0xf0,0xdf,0xb0,0x34,0x12,0x57,0xe8,0x9e,0xec,0x22,0xcf,0x21,0x1e,0x88,0xc1,0xeb,0xb5,0xc5,0x3c,0x80,0x8b,0x5c,0x40,0xaa,0x03,0xe4,0x39,0x13,0xbe,0xb0,0xdd,0x84,0x85,0x4d,0xaa,0x78,0x4f,0xe7,0x4e,0x2e,0x8e,0x1b,0xeb,0xa4,0xf8,0x8f,0xa4,0xfb,0x60,0x80,0xc8,0xb8,0x2d,0xf6,0x4f,0x64,0x7d,0x8e,0xec,0x71,0x14,0xfa,0x41,0x7a,0x63,0xda,0x60,0xc7,0xeb,0x71,0x25,0xe8,0x95,0xf0,0x27,0xc7,0x43,0x4b,0xcb,0x0e,0xed,0xf4,0x18,0xe5,0x9f,0xdc,0x72,0xbe,0x4b,0x21,0xf6,0xb7,0x0d,0x3b,0xa0,0x08,0x89,0xcf,0x65,0x58,0x6b,0x2e,0xb1,0x9b,0xf2,0xde,0x60,0xfa,0xaa,0x50,0x3e,0x5e,0xa8,0xf3,0x09,0x81,0x7f,0x64,0xa3,0x54,0x34,0xcb,0x7b,0x27,0x42,0xf9,0xcf,0x53,0xe4,0x4d,0x35,0x3b,0xb2,0x9c,0xaa,0x2a,0xf4,0xa5,0xdc,0xaa,0xcb,0x5b,0xc4,0x67,0xb9,0x28,0x1f,0xd4,0xa6,0x4c,0x6b,0x73,0x37,0x5f,0x0e,0x3f,0x66,0xa9,0x91,0xd5,0x38,0xb3,0xb1,0x4a,0xf6,0xbf,0x10,0x2b,0x58,0x5d,0x5a,0x30,0x17,0xb8,0xc4,0xf4,0x0e,0xdd,0x20,0xfb,0x0b,0xb7,0xa6,0xe9,0x7c,0xf0,0xcb,0xe2,0xf9,0x7e,0xea,0xf1,0xd4,0x9c,0x43,0xd2,0xa2,0x9a,0x95,0x6a,0xa5,0x97,0xf6,0x6d,0x5b,0x8f,0x18,0xd7,0xd1,0x96,0x3c,0xef,0x01,0xff,0x0d,0x70,0x27,0x97,0x96,0x1f,0x57,0x7e,0x2b,0x5b,0xa9,0x14,0x9d,0x6e,0xfa,0x1a,0x47,0x22,0xd2,0x8a,0xab,0xde,0x71,0x28,0x45,0x97,0xbc,0xbc,0xa1,0x03,0xc1,0x2a,0xb3,0xeb,0x6e,0x53,0x2e,0x23,0x0e,0x82,0xdd,0x38,0x77,0xe0,0x82,0x8d,0x55,0x5c,0x4d,0x96,0xd9,0x4d,0x16,0x19,0x82,0x3c,0xd1,0x1c,0xd8,0xbc,0x58,0x74,0x9c,0xc4,0x8a,0x9b,0xbb,0xbf,0x83,0xa1,0xe9,0x55,0x1b,0x3f,0xf7,0x17,0x21,0x4f,0x72,0x36,0xdf,0xeb,0x6e,0x70,0x48,0xbe,0x91,0xf0,0xbc,0x60,0xcd,0x2c,0x0e,0x8d,0xf1,0x8c,0x49,0xae,0xe7,0x8a,0x20,0x65,0x8c,0xea,0x8d,0x08,0x34,0xae,0x5a,0xbe,0x65,0x2c,0x40,0x20,0x9c,0x0a,0x20,0x5c,0xfd,0x5e,0x3d,0xfb,0x9a,0x3c,0xca,0xa5,0x68,0x0a,0xde,0xe7,0x97,0x8e,0x3a,0xa8,0xd7,0x17,0x96,0xdf,0x77,0x7b,0xcc,0xd9,0xe1,0x6f,0x7b,0xe8,0xc9,0xca,0x9c,0xb4,0xfa,0x2f,0x87,0xbf,0xef,0xc8,0x09,0xdc,0x7c,0x74,0x71,0xee,0xb0,0xa7,0xef,0x01,0x95,0x98,0xf3,0x28,0x7d,0xdc,0x96,0xbb,0xaf,0x5e,0x59,0x17,0x1f,0x1b,0x60,0xfb,0xba,0xd4,0x77,0x34,0x2c,0xe7,0x87,0x6a,0x7c,0x85,0x08,0x13,0x14,0x50,0x57,0x9a,0xab,0x31,0x0d,0x1b,0x40,0xbb,0x91,0x26,0x4e,0xa1,0x29,0x4b,0x9a,0x84,0xa0,0x48,0x0e,0x9c,0xab,0x78,0x08,0xab,0x9f,0x28,0x94,0xd3,0x6e,0x81,0xfb,0xfb,0xee,0x35,0x06,0x83,0x52,0xc1,0x6c,0xc0,0x03,0x12,0xc9,0x6c,0x72,0x87,0xf9,0x70,0x5c,0x0b,0x0e,0xd1,0x1a,0xe1,0x78,0xe9,0x7d,0xb9,0xfe,0x2d,0x08,0x6b,0xd0,0x31,0x60,0x32,0x74,0x4e,0xd1,0x09,0xc5,0xd2,0x48,0x24,0x6a,0x14,0xe5,0x6f,0x2e,0xfd,0x70,0x7a,0x22,0x6b,0x00,0xb8,0x2a,0x36,0x3d,0x52,0xcb,0xc1,0xad,0x4f,0x65,0x98,0x4a,0x99,0x99,0x76,0xec,0x16,0xb6,0x7f,0x78,0x35,0x54,0x9f,0xb0,0x15,0xb1,0xe4,0x23,0xeb,0x7a,0xce,0x97,0x30,0x92,0xfa,0x1d,0xb8,0x02,0x6a,0xdb,0xb0,0x01,0x05,0xf9,0x25,0xe1,0xae,0xe2,0x56,0x08,0x8b,0x2a,0x76,0x77,0x7f,0xbd,0x57,0x7b,0xa0,0xb1,0x5b,0xd7,0x01,0xe8,0x14,0xa7,0x4e,0x67,0x4b,0x1a,0x71,0x97,0xe2,0x4a,0xe7,0xaa,0x2e,0x11,0x44,0x05,0x72,0x1e,0x03,0x0a,0xd8,0xce,0x86,0x21,0xbf,0x86,0xf9,0x8c,0x2c,0x46,0x1b,0xd6,0x93,0x2e,0xce,0x7d,0xce,0xa3,0xc2,0xc2,0x46,0xfd,0x00,0xf3,0xb6,0xe3,0x44,0xd9,0x85,0x7a,0x64,0x01,0x0e,0x40,0xa6,0xd2,0xbf,0xa0,0x36,0xc7,0x9d,0x6d,0x4c,0x67,0x56,0xc9,0x05,0x26,0xe4,0xf1,0x9a,0x7c,0x9f,0xc3,0x74,0x1b,0x9f,0xc8,0xc2,0xa4,0x3f,0x27,0x72,0xae,0x23,0x78,0x1e,0x4c,0xa8,0xfa,0x16,0xd4,0x35,0x9b,0x5e,0x54,0x52,0x72,0xfb,0xcc,0x83,0x09,0x2c,0xb7,0xb0,0x51,0x09,0x65,0xc8,0xf2,0xc2,0xb1,0x4e,0xd1,0x2f,0x5d,0xc9,0xd4,0x41,0x68,0xf0,0x5e,0x0d,0x02,0x65,0x7d,0x25,0x99,0x72,0x0f,0x63,0x0f,0xfd,0x1d,0xe5,0x52,0x59,0x85,0xbd,0xc7,0xea,0x03,0x46,0x1b,0xc2,0xf0,0xef,0xb2,0xf7,0xe2,0xfb,0xed,0x7b,0x04,0x01,0xe8,0xb9,0xc3,0x72,0x01,0xbb,0xc0,0x6a,0x62,0xda,0x0d,0x5a,0xc8,0x2a,0x84,0x48,0xe0,0x22,0x35,0xc6,0x7a,0x6a,0x09,0xe8,0x55,0x0f,0xf7,0xc0,0xc0,0x3d,0x47,0x55,0x74,0x4d,0x7d,0xd4,0xe2,0x7e,0x3e,0x66,0xbc,0xf5,0xe3,0x96,0x47,0x13,0x43,0xf8,0x00,0xc1,0xb6,0x49,0xfb,0xb4,0xfb,0xbb,0xf2,0x51,0xc1,0xc8,0x14,0x22,0x8d,0xbc,0x5d,0x61,0xdb,0x7a,0x3e,0x20,0x70,0xf5,0x67,0xfc,0x90,0xa9,0xbe,0x2f,0x84,0xd3,0xa4,0xfa,0xc2,0xb7,0x5b,0xbb,0x99,0xe0,0xfe,0x97,0x8e,0x39,0x2b,0x05,0x53,0xca,0xe3,0x83,0x82,0xd6,0x4b,0x55,0x9b,0x18,0x58,0x6f,0xb4,0xd0,0x00,0xb5,0xa8,0x93,0x75,0x3d,0x53,0x6d,0xd4,0xc9,0x24,0x7b,0x66,0xce,0x7d,0x1b,0x1e,0xd5,0xc5,0x68,0x70,0x6b,0x20,0x78,0xca,0x36,0x56,0x93,0x5c,0x59,0x89,0x51,0x55,0xb0,0xb2,0x0c,0x5b,0xcd,0xa9,0xab,0x22,0x7e,0xa5,0x28,0x37,0x43,0xc6,0x69,0x15,0x37,0x3f,0x26,0xd4,0xa8,0xdf,0x1e,0x96,0xf9,0x88,0xa8,0xa2,0x49,0x61};
// const char fb001_u[] = {0xcc, 0xfa, 0xce, 0xb0, 0x01, 0x08, 0x08, 0xb0, 0x1b, 0xa2, 0x99, 0xd7, 0xff, 0x9b, 0x00, 0x00, 0x44, 0xc1, 0x6e, 0xc4, 0x97, 0x2d, 0x2d, 0x1a, 0xb5, 0x5b, 0x3f, 0xe4, 0xc1, 0x32, 0xe6, 0x12, 0xd8, 0xc1, 0x3f, 0xe2, 0x18, 0x91, 0x2a, 0xcc, 0x34, 0x9f, 0xbe, 0xe8, 0xbf, 0xcf, 0x91, 0x54, 0x23, 0x1b, 0x60, 0xbb, 0x94, 0xf3, 0xf1, 0x2d, 0x3c, 0x62, 0xf7, 0x75, 0x3b, 0x87, 0xe2, 0xb0, 0x54, 0xa5, 0x66, 0x00, 0xa0, 0x21, 0x0e, 0x8b, 0x71, 0xb5, 0xdf, 0xe6, 0x8c, 0xa0, 0xc3, 0xe2, 0xce, 0x66, 0x97, 0x95, 0xa1, 0x7b, 0x69, 0x3e, 0x98, 0xbe, 0x33, 0x33, 0x28, 0x1c, 0x71, 0xba, 0x5a, 0x38, 0xc7, 0x70, 0xd1, 0x40, 0x5b, 0x7d, 0xb3, 0x2d, 0x51, 0xc4, 0x77, 0x80, 0xaf, 0x90, 0xf1, 0xfd, 0x6b, 0xe3, 0x69, 0x5a, 0xaa, 0xc4, 0x7c, 0xda, 0x44, 0x60, 0xeb, 0x69, 0xf2, 0xae, 0x3b, 0x3d, 0x16, 0xb2, 0x8d, 0xde, 0x06, 0x2f, 0x82, 0xda, 0xda, 0xe8, 0x29, 0x8b, 0x74, 0x64, 0xb1, 0x26, 0x50, 0xbc, 0xbc, 0xdd, 0x4d, 0xe8, 0x59, 0x9b, 0x7c, 0xc7, 0xc7, 0xda, 0x25, 0xbc, 0x72, 0xf4, 0x6e, 0x25, 0x5e, 0x4a, 0x63, 0xd3, 0xfe, 0xb7, 0xc5, 0x4d, 0xa5, 0x3f, 0x76, 0xb7, 0x98, 0x65, 0x3e, 0xc7, 0x88, 0x2b, 0xf6, 0x80, 0x46, 0xa3, 0x25, 0xed, 0x73, 0x51, 0x49, 0x5c, 0xbb, 0xb1, 0x47, 0xb6, 0x17, 0xd1, 0x05, 0x19, 0x23, 0xe2, 0x37, 0x4b, 0x5e, 0x33, 0x4e, 0x17, 0x3f, 0x27, 0x82, 0xe4, 0x05, 0x34, 0x3f, 0x56, 0xeb, 0x18, 0x54, 0x0e, 0x36, 0x09, 0x22, 0x10, 0x6e, 0xa0, 0xb7, 0xad, 0x7f, 0x8e, 0x96, 0xd2, 0x5f, 0xa1, 0x84, 0x10, 0xd4, 0x72, 0x1a, 0x9d, 0x1c, 0xc8, 0x45, 0xd6, 0x5c, 0x97, 0xc9, 0xd7, 0xa1, 0x1f, 0xef, 0x7e, 0xf7, 0xa4, 0x77, 0x89, 0xc7, 0x4a, 0x62, 0x6d, 0xe2, 0xa6, 0x35, 0xe8, 0x30, 0x1e, 0x0e, 0xbc, 0x9a, 0x9e, 0x57, 0x24, 0xbd, 0x6c, 0xfb, 0xea, 0xb4, 0x15, 0xe5, 0x47, 0xcc, 0x2a, 0x16, 0xaa, 0xef, 0xcb, 0x18, 0x66, 0x32, 0x96, 0x55, 0xa7, 0x56, 0x01, 0x4d, 0x28, 0x40, 0x84, 0x63, 0x2e, 0x7b, 0x62, 0x3b, 0xae, 0x34, 0xcc, 0xb2, 0x8a, 0x5e, 0x31, 0x41, 0xcd, 0xb7, 0x19, 0xa8, 0x76, 0xe0, 0xa5, 0x12, 0x87, 0xd1, 0x56, 0xbf, 0x52, 0x6e, 0xd5, 0x0a, 0xec, 0xb6, 0x10, 0x57, 0x99, 0xaf, 0xfa, 0x24, 0x46, 0x4e, 0x86, 0x21, 0x46, 0x70, 0x97, 0xb2, 0x48, 0x5d, 0x69, 0x45, 0x04, 0x6e, 0xfc, 0xcf, 0x5d, 0xf1, 0x8b, 0xee, 0xc6, 0x6e, 0x48, 0x7b, 0xf2, 0xb6, 0x5c, 0xec, 0x25, 0x8e, 0x4c, 0x41, 0xe2, 0x53, 0x42, 0x4a, 0xfa, 0x74, 0x1d, 0x79, 0x16, 0xf3, 0x64, 0xff, 0xe2, 0x47, 0x64, 0xef, 0x85, 0x8a, 0xff, 0x9e, 0x46, 0x0a, 0x90, 0x7e, 0xa7, 0x57, 0x1a, 0xe2, 0x90, 0x30, 0xbb, 0x14, 0x2a, 0x61, 0x08, 0x2f, 0x4c, 0xdf, 0xf8, 0xea, 0x61, 0x65, 0xac, 0xea, 0xa1, 0x78, 0x69, 0x25, 0xf4, 0xf5, 0x7c, 0xfc, 0x20, 0x1c, 0x05, 0xc9, 0x33, 0x32, 0x99, 0x89, 0x7a, 0x86, 0x96, 0x5c, 0x7d, 0x81, 0x80, 0x3d, 0x05, 0x28, 0x33, 0x10, 0x06, 0xa2, 0xc1, 0x7c, 0xaf, 0xe6, 0x46, 0x86, 0xb3, 0x45, 0x4a, 0x2a, 0x55, 0x81, 0xb3, 0x9e, 0x25, 0x54, 0xf7, 0xb3, 0x18, 0x40, 0xe4, 0xbd, 0xc7, 0x62, 0x67, 0x37, 0x66, 0x97, 0x2f, 0xbf, 0x12, 0x1f, 0x09, 0x37, 0x36, 0x78, 0xf6, 0xa3, 0x62, 0xb4, 0xe9, 0xff, 0x0a, 0xca, 0xdc, 0x08, 0x8a, 0x8a, 0x24, 0x15, 0x69, 0x86, 0xaa, 0xae, 0x56, 0x38, 0x97, 0x58, 0x24, 0x25, 0x52, 0x3f, 0xb4, 0xf5, 0x26, 0x4c, 0xff, 0xf8, 0x60, 0x1f, 0xfa, 0xc8, 0x38, 0xd8, 0xe9, 0xad, 0x39, 0x27, 0x25, 0x3c, 0xbc, 0x4e, 0x46, 0x53, 0xf5, 0x97, 0x4f, 0x8b, 0xb5, 0xd5, 0x58, 0xab, 0xde, 0x1c, 0x10, 0x71, 0xe7, 0x69, 0x62, 0xba, 0xa7, 0x44, 0xb0, 0xff, 0x28, 0xa6, 0x1b, 0x50, 0x3c, 0x28, 0xb3, 0x45, 0x1b, 0xf1, 0x70, 0xae, 0xef, 0x04, 0x24, 0x57, 0xd4, 0x1d, 0x03, 0xe8, 0x72, 0x37, 0x31, 0x56, 0x50, 0x56, 0xb6, 0x10, 0x00, 0x4d, 0x5a, 0xeb, 0x30, 0x3b, 0x53, 0x89, 0xec, 0x32, 0x2e, 0xab, 0x75, 0x3f, 0x0a, 0x5c, 0x3c, 0xde, 0x3d, 0xce, 0x35, 0xf8, 0x05, 0xff, 0xcb, 0x6a, 0x57, 0x67, 0xd7, 0x89, 0x6a, 0x12, 0x1c, 0xad, 0x81, 0x54, 0xf7, 0xe8, 0x1e, 0xdb, 0x30, 0xef, 0xb4, 0x2c, 0xd9, 0xdf, 0x73, 0x1a, 0x50, 0x10, 0x3b, 0xdb, 0x04, 0xb8, 0x9c, 0x34, 0x2b, 0x97, 0x4f, 0x42, 0xda, 0xf7, 0xbe, 0xbc, 0xdd, 0x44, 0xdc, 0x0a, 0xb6, 0xb4, 0x6a, 0xb0, 0xf6, 0x3c, 0x4d, 0x54, 0x0c, 0x3f, 0x0e, 0xf8, 0x0b, 0xc8, 0x6e, 0xf2, 0x27, 0x63, 0x6c, 0x1c, 0xba, 0xc7, 0x7d, 0x7f, 0xe6, 0xf8, 0xb4, 0x3c, 0x73, 0xa5, 0x59, 0x94, 0x73, 0xca, 0x49, 0x5d, 0xec, 0xcb, 0x65, 0x03, 0x0f, 0xb7, 0x3f, 0x5a, 0xdb, 0x58, 0xab, 0x6c, 0x90, 0x49, 0xf6, 0x2f, 0x1c, 0x98, 0x48, 0x7a, 0xe8, 0xb0, 0x5d, 0x37, 0xd0, 0x9e, 0xc8, 0xf3, 0xf6, 0x96, 0xeb, 0x50, 0xea, 0xbc, 0xc0, 0x21, 0xd6, 0xda, 0xf1, 0xcf, 0x30, 0xd9, 0x9a, 0x17, 0x4c, 0x34, 0x2c, 0x84, 0x29, 0x05, 0x77, 0x6e, 0x54, 0xd9, 0xbc, 0x73, 0x0e, 0xb8, 0xd8, 0xdf, 0x96, 0x8e, 0xeb, 0x32, 0x5b, 0x04, 0x84, 0xc6, 0xfa, 0x18, 0x06, 0xb5, 0x93, 0x32, 0x5a, 0x18, 0xc7, 0x4f, 0x24, 0x54, 0x87, 0xa1, 0xfb, 0x9f, 0x4c, 0x76, 0xeb, 0x2b, 0x76, 0x48, 0x51, 0x24, 0x02, 0xa7, 0x33, 0x2c, 0xf0, 0x46, 0x8c, 0xab, 0x7c, 0x8a, 0x3a, 0xaa, 0x06, 0xd7, 0x24, 0xf3, 0xc8, 0x3d, 0xf9, 0x2d, 0xf5, 0x39, 0xc5, 0x39, 0x27, 0x8b, 0x91, 0x92, 0x3b, 0xfa, 0x07, 0x52, 0x29, 0x7b, 0xa3, 0xe1, 0x25, 0x86, 0xd3, 0x1f, 0xca, 0xa0, 0x48, 0x54, 0xbc, 0xaa, 0xe0, 0x2d, 0x07, 0x89, 0x5a, 0x9d, 0xbc, 0x20, 0x79, 0x43, 0xfc, 0x5e, 0x40, 0x91, 0x35, 0xda, 0x8a, 0x5e, 0xbf, 0xa3, 0x58, 0x7a, 0x37, 0x22, 0xf3, 0x4b, 0x2e, 0xc5, 0x74, 0x70, 0xae, 0xf5, 0xb5, 0x73, 0x18, 0x70, 0xa9, 0x13, 0xe4, 0x68, 0x68, 0x28, 0x8c, 0x88, 0xf3, 0x7f, 0xde, 0x79, 0x55, 0xc8, 0x1a, 0x98, 0x4f, 0xcd, 0x6e, 0x63, 0x67, 0x2c, 0xa9, 0x92, 0x61, 0x86, 0x8c, 0x8f, 0x30, 0xe9, 0x79, 0xe4, 0xba, 0x10, 0xae, 0x09, 0xf0, 0xef, 0x45, 0x37, 0x3a, 0xcd, 0x03, 0x0c, 0x21, 0x05, 0xcb, 0x3b, 0x68, 0x91, 0x23, 0x7d, 0xe6, 0x10, 0x75, 0x9c, 0xb0, 0x26, 0xf0, 0x70, 0xb0, 0x1b, 0xae, 0x4f, 0x15, 0x41, 0xa1, 0x17, 0xdc, 0x02, 0x84, 0xb1, 0xe4, 0x60, 0xbf, 0xc5, 0x31, 0x2f, 0x45, 0x5a, 0x11, 0xef, 0xf2, 0x42, 0x50, 0x9e, 0x5c, 0x69, 0x9f, 0xb1, 0xe7, 0x96, 0x5d, 0x89, 0x31, 0x1a, 0x87, 0x3a, 0x55, 0x78, 0x72, 0x39, 0x31, 0xc6, 0xd7, 0x83, 0xa2, 0x2c, 0xf6, 0x1b, 0x20, 0x3a, 0xb9, 0xb4, 0x34, 0x8e, 0x35, 0x18, 0x11, 0xf6, 0x5c, 0x63, 0x0d, 0x5a, 0x41, 0xec, 0xa9, 0x15, 0xcf, 0x0f, 0x3f, 0x1a, 0xd4, 0xab, 0x88, 0xcb, 0x0c, 0x4f, 0x2b, 0xe0, 0x32, 0x0b, 0xce, 0x75, 0x2a, 0x5b, 0x37, 0x2e, 0x52, 0x8a, 0x88, 0x79, 0xd9, 0x11, 0x16, 0xdb, 0xef, 0xf0, 0x30, 0x31, 0xea, 0x29, 0xf1, 0x7d, 0xae, 0xa3, 0x61, 0x3e, 0xae, 0xb1, 0xcf, 0xf5, 0x7d, 0x98, 0x6f, 0x52, 0x37, 0xf1, 0x30, 0x9d, 0x4f, 0x9c, 0x46, 0x29, 0x61, 0xa1, 0x5e, 0x77, 0x01, 0xd6, 0xc1, 0x24, 0x50, 0x85, 0x2d, 0x68, 0x8c, 0x03, 0x35, 0x0d, 0x3f, 0x9d, 0xce, 0xbe, 0xc4, 0x23, 0x48, 0x7f, 0x6e, 0xa7, 0x39, 0xa6, 0x84, 0xf1, 0x94, 0x3b, 0xd0, 0xf3, 0x4d, 0xe7, 0x98, 0x88, 0xed, 0xd4, 0x59, 0xfa, 0x54, 0xe3, 0x96, 0x70, 0xc7, 0x20, 0xa5, 0xa7, 0xc9, 0x71, 0x3a, 0xfa, 0xdf, 0x04, 0x3d, 0x39, 0x5d, 0x4b, 0xea, 0x2b, 0xdb, 0xaa, 0x27, 0xc7, 0x11, 0x0e, 0x30, 0xd8, 0x35, 0xbe, 0xde, 0xf6, 0x6e, 0xdb, 0x9c, 0xe8, 0xe5, 0xfb, 0x09, 0x42, 0x7d, 0xfd, 0xa7, 0x84, 0x5d, 0x80, 0xc8, 0xd1, 0xb9, 0x68, 0xc4, 0xb8, 0x99, 0x73, 0xa4, 0x3d, 0x1f, 0x97, 0x33, 0xdf, 0x84, 0xf8, 0xbc, 0x89, 0x52, 0x9f, 0xab, 0x70, 0x43, 0x83, 0xb5, 0x6a, 0xa9, 0x8f, 0xf9, 0xd5, 0x0f, 0x0f, 0x05, 0xf2, 0xc0, 0x95, 0xd4, 0xff, 0xba, 0x5e, 0x89, 0x83, 0x79, 0x5f, 0x38, 0x04, 0x71, 0x53, 0xb5, 0xda, 0x08, 0x05, 0x00, 0x73, 0x3e, 0x1f, 0x72, 0x3c, 0x42, 0x00, 0xdc, 0x4e, 0xd0, 0x2e, 0xbf, 0xbe, 0xeb, 0xf5, 0x72, 0x85, 0xb0, 0x32, 0x30, 0xd6, 0x87, 0x9e, 0xbd, 0xbf, 0x9c, 0xa5, 0x8d, 0x39, 0x2e, 0x9f, 0x50, 0xf5, 0xbc, 0xa6, 0xeb, 0x26, 0x61, 0xf1, 0x7b, 0x44, 0xf6, 0xee, 0x8a, 0x8d, 0x63, 0x14, 0x7d, 0x02, 0x25, 0x06, 0x27, 0xc0, 0xba, 0x94, 0x3f, 0xae, 0x8a, 0x4f};
const char fb002_u[] = {};
const char q050_u[] = {0xc4,0x51,0x30,0x35,0x30,0x08,0xca,0xfd,0x9f,0x3e,0x03,0x60,0x3c,0xb2,0x00,0x00,0x45,0x34,0x47,0x26,0x37,0x21,0x45,0xa7,0xa2,0x2d,0x1d,0x1e,0x8b,0x03,0x00,0x57,0x82,0x29,0xfa,0xef,0x0f,0xf7,0x4a,0x9c,0x88,0xdd,0x7a,0x74,0x6d,0x04,0x3f,0xf8,0x7a,0x12,0x7e,0x9f,0xaa,0xf8,0x36,0x1e,0x66,0x34,0x1a,0xf4,0x22,0xde,0x91,0xda,0x94,0xe3,0x55,0x16,0x9c,0x39,0x71,0x52,0xb5,0xd2,0xb1,0x62,0xa2,0x5d,0x28,0x38,0x7a,0x21,0xda,0x04,0x2f,0x75,0x49,0x6a,0x1f,0x45,0xce,0x4a,0x87,0x93,0x0e,0xdb,0x64,0x87,0x7c,0x19,0x2f,0x4a,0x4c,0x5d,0x4b,0xf9,0xc9,0xbb,0x11,0xde,0xb6,0x2c,0x91,0xee,0xc0,0x6f,0x4d,0x3d,0x2f,0xae,0xf0,0x09,0xe4,0x44,0x53,0x3d,0xe4,0x73,0x67,0xdc,0x0a,0x07,0x78,0x6f,0x7c,0x84,0xa5,0xbd,0x79,0xe0,0x9a,0x50,0xed,0xdd,0xc2,0x91,0x31,0x2f,0xe6,0x64,0x2e,0x87,0x63,0xa8,0x47,0x0e,0x20,0xe3,0xd4,0xe1,0x6d,0x64,0x4b,0xe6,0x46,0x2f,0x12,0x05,0xbb,0x3b,0xba,0x37,0xb5,0x9b,0x5d,0x4d,0xcf,0x78,0x71,0xc5,0x97,0xfd,0xbc,0x50,0xf3,0xc2,0x12,0x01,0x22,0xeb,0xc9,0xf4,0x90,0x01,0x8a,0x93,0x03,0xca,0x99,0xf6,0x8c,0x1d,0x70,0x88,0xdf,0x37,0x5f,0x6d,0xf0,0xc7,0x05,0x5d,0x52,0xa3,0xfe,0xdd,0x83,0xc9,0x4d,0x68,0x1a,0xf1,0xd2,0xc3,0x50,0xc5,0xc8,0x4a,0xe6,0xbe,0xc2,0x74,0xed,0x79,0x56,0xa5,0x5d,0xfc,0xf5,0x80,0x81,0xed,0x6f,0x30,0x77,0x07,0xe9,0x98,0x71,0x26,0x35,0xe4,0x75,0xdb,0x7d,0x31,0xc5,0xda,0xc3,0x5b,0x4f,0xaa,0xc8,0x9f,0xd2,0x8c,0x92,0x71,0xfc,0x22,0x76,0x1e,0x13,0xb8,0x45,0x8d,0x2f,0x87,0x07,0x4c,0xdb,0x9d,0x6f,0x1a,0xa7,0xeb,0x42,0x46,0x95,0x7d,0x1a,0x6c,0xbb,0x97,0xe7,0x89,0x5b,0x74,0xd7,0xd8,0xcf,0x20,0x6c,0x52,0x6c,0x67,0x1c,0xa2,0xc6,0x3e,0x0e,0xf2,0x03,0x73,0x8f,0x46,0x2e,0x90,0xff,0xb9,0xd7,0xe4,0x99,0x1c,0x65,0xf4,0x9c,0x7d,0x5e,0x76,0x0b,0xb1,0x78,0x86,0x73,0x98,0x95,0x92,0x14,0xe3,0x11,0x4b,0x95,0xdd,0x79,0x9d,0xb6,0xc7,0xf6,0x2f,0x53,0x73,0x07,0x23,0x90,0x07,0x57,0x34,0xf1,0x05,0x04,0x6c,0xaa,0x25,0x8d,0xe4,0x12,0x57,0x0a,0x8e,0xe0,0x7b,0xba,0x48,0xfe,0xec,0xeb,0xc8,0x3c,0xc0,0xd5,0x1d,0x8f,0x8a,0x92,0x5d,0x8d,0x3b,0x69,0x56,0xd1,0x67,0x06,0x3e,0x18,0x17,0x4c,0xef,0x8f,0xfc,0x09,0x37,0x3c,0x13,0x0d,0x17,0xb5,0x65,0xde,0xe0,0x26,0x60,0xd3,0xd7,0xdf,0x2d,0x44,0x9c,0x29,0xca,0x2a,0xee,0xad,0x62,0x24,0x81,0x3b,0x45,0x98,0xfa,0x18,0x15,0xa5,0x23,0x60,0xc8,0x65,0x90,0xe0,0x54,0x74,0x23,0x83,0x38,0x8f,0x48,0x43,0x93,0x59,0x73,0xba,0x52,0x7d,0x4d,0xdf,0x06,0x73,0xc1,0xd9,0x78,0x63,0x94,0xe6,0xa6,0x77,0xb6,0x1f,0xe0,0x19,0x84,0xa4,0xf8,0xb9,0x10,0xc1,0xc9,0xb3,0xd3,0xf6,0x24,0xe9,0x16,0x65,0x2c,0x1c,0x72,0xc7,0xf0,0x34,0xa2,0x7e,0x83,0x29,0x6f,0xc9,0x51,0x0a,0x37,0x6d,0x0b,0x0c,0xb7,0xdc,0x4d,0xc6,0xcb,0x98,0xf1,0x2b,0xcd,0xdb,0xbb,0xa9,0x4c,0x5b,0x97,0x1a,0xa7,0xc1,0x4f,0x32,0xd9,0xbf,0x7b,0xf3,0x19,0x99,0xb3,0xbf,0x8b,0x62,0x46,0x36,0x59,0xd2,0xd0,0x1b,0x4a,0x97,0x9d,0x42,0xa1,0xcd,0xfc,0x81,0x72,0xfe,0x49,0x3e,0x92,0xbf,0x0f,0x8a,0xc1,0x82,0x4d,0xc4,0xfe,0xdd,0x62,0xfa,0x24,0x46,0x2f,0x0f,0xd1,0xfd,0x00,0xc5,0xd3,0x7e,0xb0,0x2b,0x2d,0x47,0x00,0x8f,0x61,0x97,0x78,0x6a,0xe9,0x3f,0xdd,0xc7,0x01,0xc5,0x89,0x9c,0xfd,0xc2,0xac,0xc9,0x32,0x7f,0x22,0xc6,0xf2,0x62,0x70,0x03,0x07,0x4a,0x97,0xee,0x28,0xb9,0x1a,0xdc,0x37,0x74,0xf9,0xbf,0x77,0x9c,0x57,0x0d,0x82,0xa1,0xf5,0x8b,0x34,0x95,0x05,0x1f,0x42,0xe4,0xc1,0xeb,0x37,0x97,0x95,0x9f,0xc1,0x6f,0x91,0x84,0x47,0x87,0x41,0x6e,0x3a,0x46,0x63,0x25,0x83,0x89,0x3a,0x39,0xd9,0x6c,0x2f,0x8d,0x2e,0x69,0xee,0xe5,0xbd,0x4e,0xc4,0x85,0x27,0x82,0x0a,0x1e,0x02,0x20,0x16,0xf5,0xf1,0xcd,0x78,0x3b,0xb6,0x36,0x9f,0x74,0xf3,0x57,0x41,0xd7,0x32,0x30,0x1b,0x0d,0x56,0x4a,0xd4,0xf1,0xaa,0x84,0xc1,0xe2,0x98,0x4b,0xf7,0xb0,0x8b,0xe6,0x8a,0xf1,0x8c,0xf0,0x76,0x0e,0x18,0xf5,0x9e,0xd7,0x51,0xdd,0xa6,0x01,0xce,0x47,0xe9,0x68,0x7f,0xb7,0x5f,0x17,0x78,0x71,0x4f,0xfb,0x9f,0xee,0xc8,0x7c,0x46,0x6f,0xe6,0xf7,0x92,0x39,0x91,0x78,0x82,0xb9,0x04,0x22,0x63,0x02,0x31,0xb5,0xd5,0x7c,0x6b,0xb3,0x7c,0x52,0x82,0x84,0x36,0xac,0x32,0x29,0xce,0xed,0x6e,0x73,0xfd,0x04,0xb7,0xc3,0x5b,0x4e,0x57,0x26,0xe7,0x29,0x1e,0x54,0xa8,0xdf,0x05,0xb5,0xa0,0x67,0x59,0x78,0x05,0x02,0xa1,0x95,0x35,0x9f,0x0e,0x57,0x5a,0xe1,0xc8,0x9e,0xa9,0xb6,0x88,0xfd,0x16,0x45,0xd4,0x05,0xeb,0x91,0x96,0xf4,0x90,0x67,0x2f,0x0c,0xfd,0x32,0x11,0x2c,0x1c,0x1f,0x87,0x3c,0xfa,0x19,0x1c,0x2d,0x11,0x4c,0x33,0x00,0xa6,0xbe,0x24,0x18,0xbe,0x89,0x79,0x47,0xb7,0xd8,0x2c,0x4b,0x02,0xce,0xb4,0x42,0xd4,0x9e,0x4b,0xd3,0xb0,0x03,0x55,0x54,0x1d,0x3c,0xc0,0xb3,0xc7,0x40,0x56,0x86,0x6b,0x59,0x63,0x68,0x44,0xef,0xdd,0x5f,0x5d,0xf2,0xac,0xfb,0x25,0xf6,0x70,0xaf,0xdf,0x0a,0x0d,0x6e,0x2f,0x61,0x55,0xc9,0x4f,0x65,0x42,0x55,0x5d,0xa6,0xf5,0x9f,0x0a,0x6d,0x6c,0x9d,0x8f,0xf2,0x15,0x5c,0x3e,0x6f,0xff,0x1b,0xa8,0xc0,0x1a,0xd6,0x81,0x06,0xb6,0x87,0xfa,0xfe,0xfe,0x24,0xe7,0x63,0x49,0x43,0xce,0x95,0xed,0x25,0x2c,0xb0,0x70,0x5a,0x62,0xed,0xeb,0x75,0x49,0xee,0x37,0xfe,0xfe,0xd6,0xee,0xcf,0x93,0x3f,0x01,0x38,0x03,0x4d,0xe7,0x92,0x05,0xe9,0x9a,0x9e,0x1e,0xbb,0x4a,0x93,0xc2,0x14,0xe0,0xb1,0x45,0xbb,0x57,0x21,0x2a,0x5b,0xe3,0xee,0x6a,0x6e,0x1e,0x89,0x62,0x57,0xc6,0xb0,0x46,0x4d,0x57,0x03,0x1a,0xa3,0xf5,0xfa,0xd9,0x76,0x62,0xb1,0x8e,0x12,0x65,0x92,0xd5,0x86,0xd7,0x60,0x35,0xe9,0xbd,0xd9,0x91,0xeb,0x98,0x95,0x8b,0x8c,0x11,0x0c,0x8e,0x4d,0x7c,0x24,0xa4,0x5d,0x22,0xe5,0xd3,0x04,0xd8,0xd1,0x79,0xcd,0xab,0xdd,0x97,0x8a,0x9a,0x4b,0x3d,0x5c,0xce,0x97,0xef,0x5c,0x58,0x05,0x98,0x47,0xa7,0xe2,0xa5,0xe8,0xfd,0x27,0xf8,0xd1,0x58,0xc3,0x69,0x85,0x14,0xc3,0x12,0xe1,0xd2,0x0d,0xbe,0x07,0xc8,0x3b,0x69,0x86,0x1a,0x82,0xcd,0x76,0xb4,0x5f,0xef,0x00,0x31,0x4d,0x20,0xfb,0x90,0xbe,0x2d,0xfa,0xfc,0xd0,0xca,0x20,0x0b,0x7c,0x48,0x79,0xe8,0xcb,0x7a,0x38,0x25,0xff,0x3d,0xa9,0x62,0x83,0x66,0x18,0x04,0xc5,0xf8,0x05,0xdb,0xf4,0xbc,0x1a,0x63,0xe0,0x31,0xab,0x90,0x8b,0xee,0xee,0xb5,0x18,0x15,0x61,0x2f,0xe2,0xea,0xec,0x71,0x7c,0xdf,0x0c,0xb9,0x04,0xa8,0xfc,0xa3,0x9c,0x79,0xfe,0x2c,0xa5,0xd1,0xc1,0x99,0xf6,0x61,0x95,0x10,0x55,0xed,0x8a,0xa4,0xf7,0x60,0x48,0x16,0xd8,0xe3,0x92,0xc3,0x53,0xdc,0xb1,0xd2,0x9c,0x1c,0x83,0xdb,0x2c,0x4c,0xb1,0x79,0xaf,0xb6,0xc1,0xd9,0x1a,0x62,0x89,0x0f,0xa7,0xcb,0x2a,0x3c,0x49,0x17,0x03,0xc6,0x0f,0x2e,0x99,0x1a,0xdb,0x98,0x21,0x83,0x55,0x1c,0xe1,0x20,0x5b,0x7e,0xf3,0x7b,0x59,0x9b,0xe3,0xfb,0xb3,0x28,0xfc,0xd0,0xa5,0x29,0xf0,0xa1,0x08,0x41,0xf6,0x4e,0xb9,0xfe,0x44,0x8f,0xeb,0xa2,0x8c,0x4a,0xae,0xb3,0x2b,0x26,0xb8,0x78,0x06,0xcb,0xff,0x34,0x2f,0xf5,0x01,0x91,0xc0,0x92,0x83,0xbb,0xfd,0x09,0x2f,0x73,0xf4,0x8b,0xed,0x0c,0x18,0x56,0xe2,0x9a,0xca,0x35,0x2e,0x46,0x76,0x77,0x6f,0xc0,0xab,0x30,0x90,0x5d,0x94,0x2f,0x3a,0x37,0x51,0x0f,0xe1,0xad,0xe7,0xa5,0x5b,0xaa,0x86,0xc5,0x77,0xa4,0x2a,0x80,0x05,0xe3,0xb9,0xc3,0x22,0x6f,0xbc,0xe4,0xd1,0xe8,0xfd,0xef,0x0a,0x98,0x4b,0xf0,0x69,0xf0,0xb6,0x3b,0x65,0xa0,0x3f,0x79,0x85,0x3f,0x7f,0xa6,0x72,0x51,0x7e,0xd1,0xa3,0xfc,0x14,0x66,0xd7,0xea,0x0e,0x32,0x07,0x73,0x0a,0x73,0x30,0x05,0x7a,0x59,0x09,0xba,0xe9,0x5f,0xe6,0x4e,0x0b,0x68,0x3d,0xa1,0x9f,0xd8,0x9f,0xc5,0xbd,0x87,0x08,0x07,0x1c,0x3f,0x0b,0xdd};
const char t050_u[] = {0xcb,0x54,0x30,0x35,0x30,0x08,0x1a,0xcd,0x2c,0xf6,0x1f,0xfe,0x9b,0xf6,0x00,0x00,0x45,0x34,0xa6,0xd8,0x45,0x20,0x7c,0x39,0xf3,0x26,0x73,0x23,0xdf,0x14,0x79,0xba,0xc0,0x47,0x58,0xd8,0x92,0x4a,0x4f,0xcc,0xf8,0xa3,0x00,0x27,0x00,0xc1,0x01,0xbe,0xfa,0x06,0x0f,0xd4,0x21,0xb6,0x90,0x34,0xa9,0xa1,0x95,0xe9,0x93,0x35,0x24,0x91,0xb6,0xd1,0x6a,0xbe,0xf7,0x64,0x54,0xe0,0xf1,0x12,0x3e,0xe7,0x9b,0x59,0x0c,0x0e,0x29,0x80,0xee,0x33,0x14,0x29,0x3e,0x4c,0xa9,0x62,0x3d,0xe7,0x24,0x79,0x5f,0xa0,0x56,0xf2,0x87,0x78,0xea,0x3e,0x4b,0xc0,0x24,0xd1,0xfd,0x4e,0x2c,0x65,0x08,0xa0,0x11,0xdf,0x81,0xcd,0xcf,0x4f,0x31,0xd8,0x42,0x90,0x53,0x09,0x6b,0x2d,0xc5,0x68,0xd5,0x0d,0xf1,0x51,0x8b,0x8b,0x09,0x85,0x19,0xed,0x15,0xa6,0xf3,0xce,0xb9,0x85,0x6e,0x3a,0xfe,0xeb,0x3c,0x98,0x5e,0x17,0xae,0xc4,0x76,0x50,0xb5,0x76,0x7d,0x9a,0xc1,0x43,0x12,0x7d,0x46,0xda,0x54,0x24,0xb8,0xe8,0x5e,0x8f,0xd5,0x0c,0x3e,0x64,0xf4,0x3f,0x7e,0xc9,0xf7,0x38,0x49,0xd0,0x8a,0x3a,0x9e,0xe4,0x30,0x12,0x11,0x4e,0x68,0x15,0xde,0xa2,0xa1,0x10,0x05,0xd8,0xe4,0x19,0xbe,0x19,0x31,0x1c,0x4a,0xf1,0xd7,0x87,0x38,0x59,0xd5,0x44,0x2d,0x9f,0xb2,0x2f,0xa8,0x56,0x97,0x73,0xe6,0xe6,0x05,0xe5,0xdd,0xd8,0x7e,0xb3,0xd5,0x37,0xd4,0xb8,0xc2,0x75,0xfd,0xe1,0xa1,0x83,0x00,0xf0,0xfa,0xdf,0x50,0xae,0x0c,0xb7,0xaf,0xa5,0x3a,0x3c,0xb1,0x83,0x2e,0xd0,0x86,0x08,0x1f,0x6e,0xca,0xfd,0x52,0xb1,0x71,0xa7,0x0f,0x0a,0x36,0x40,0xab,0xe7,0xf4,0x01,0x39,0x13,0x96,0x39,0xaf,0xec,0x9f,0x29,0xf0,0x3c,0x74,0x43,0x12,0x10,0x3b,0x5b,0x4d,0x39,0x02,0x67,0x34,0x09,0xc4,0x0b,0x84,0x94,0x4d,0x07,0x28,0x4e,0x41,0x12,0xce,0x03,0x31,0x8c,0xa4,0xcb,0x64,0x32,0x10,0x9f,0xa6,0x00,0xae,0xd3,0x9a,0x71,0xdc,0xc1,0x0c,0x69,0xe0,0x61,0x00,0x35,0x5d,0x01,0x99,0x6a,0x3f,0x5b,0xf0,0x2a,0x78,0x85,0x29,0x0b,0x1b,0x70,0x86,0xe8,0xbf,0xb1,0x1d,0x19,0xb4,0x99,0x5a,0x71,0xc8,0xd4,0x79,0xe3,0xe7,0xb0,0xd1,0x9d,0x2d,0x81,0x66,0xc2,0x2a,0xce,0x59,0x8d,0x10,0x54,0x06,0xbe,0xf3,0xa4,0xb6,0xe4,0xbf,0xd7,0xf7,0x6d,0x30,0x1a,0xa6,0xdc,0xae,0xe3,0xea,0x65,0x2f,0x42,0x83,0x6e,0x2b,0xea,0x2f,0xe3,0x70,0x4c,0x6e,0x34,0xe2,0xdf,0xff,0x0c,0x2d,0x3a,0x8e,0x37,0xf3,0xe3,0xa1,0x9e,0x3f,0x6b,0xea,0x1e,0x4d,0x40,0x06,0xcc,0x75,0x87,0xbc,0x25,0x8b,0x12,0x6c,0x57,0x78,0x60,0x24,0x64,0xdf,0x39,0xf8,0x46,0x0e,0xf1,0x52,0x0e,0xd3,0xed,0x39,0x8a,0x1e,0x03,0x2f,0x26,0x1c,0xd5,0x72,0xc3,0x92,0x62,0x29,0xa3,0xa9,0x5b,0xe2,0xa2,0x65,0xb4,0xb3,0x48,0xb4,0x8c,0x26,0xd2,0x81,0x9a,0x47,0xa9,0x4f,0xef,0xee,0xba,0x87,0xbe,0x42,0xbd,0xff,0x65,0xdd,0xdb,0xc4,0x63,0x14,0xef,0xee,0xc1,0x9e,0x83,0xab,0x1f,0x8f,0xc7,0xbe,0xda,0x4f,0x86,0xb2,0x0d,0x4a,0x8e,0x7f,0x28,0xa9,0xce,0x3c,0xc5,0x7f,0xe0,0x3a,0x50,0x13,0xbd,0x8c,0x28,0xca,0xbf,0x2d,0x66,0x12,0x11,0x58,0x23,0xd0,0xa8,0x1c,0x2c,0x6a,0x01,0x76,0xec,0xdf,0x31,0x6b,0x80,0x44,0x48,0x08,0x4f,0xd9,0xfb,0x13,0xba,0x57,0x90,0x66,0x12,0xf1,0xe2,0xa8,0xe1,0xe0,0xc3,0xc3,0x0e,0x50,0xe9,0x4d,0xf5,0x12,0x81,0x51,0x45,0x69,0xc8,0x0e,0xe0,0xcb,0xe3,0xcd,0xc8,0x09,0x56,0x61,0x96,0xe6,0xac,0x37,0x1e,0x8f,0xa3,0x6d,0x91,0x2c,0x1b,0xd6,0xe1,0x6d,0xac,0xba,0xc2,0x49,0xe7,0xe5,0xa3,0xd6,0x1e,0xd7,0xd3,0x4b,0x98,0xe2,0x15,0xca,0xbb,0x1c,0xf5,0xad,0x7f,0x89,0x68,0xef,0x22,0x6d,0xa8,0xbb,0x39,0x9f,0xe4,0x85,0xdb,0x63,0x10,0xa6,0x43,0x35,0x07,0x76,0x85,0xce,0x7b,0x79,0x67,0xa0,0x6e,0x52,0x05,0x3d,0x38,0xa8,0x1c,0xa4,0x75,0x41,0x64,0xa0,0xa8,0x87,0xa6,0x2e,0x97,0xa1,0x60,0x40,0x8d,0x8e,0x8b,0x1d,0x25,0x2b,0x78,0x80,0x7c,0x0b,0x9e,0x81,0x75,0xbe,0x48,0xab,0xb4,0x88,0xe1,0x79,0x1f,0xe0,0x43,0xc2,0x23,0x36,0x28,0xb9,0x70,0x31,0xcf,0xbb,0xce,0xfb,0x6a,0x03,0xc9,0x13,0x78,0x79,0x1f,0xdf,0xb4,0x77,0x47,0x4b,0x09,0x0c,0x0c,0x47,0xd9,0x60,0x11,0x41,0x1f,0x4c,0x55,0x76,0x44,0x65,0xfa,0xfc,0x4d,0x95,0x6a,0xde,0x39,0x4a,0xad,0x44,0xf3,0x0c,0x54,0x2b,0x04,0xe5,0x71,0x91,0x69,0x17,0xc1,0x71,0x62,0xc7,0x43,0x4d,0xc8,0x41,0xb5,0x98,0xd8,0x49,0x53,0x0b,0x55,0xd8,0x18,0x82,0xd0,0xbf,0x40,0xa9,0x34,0xf7,0x5f,0x51,0x41,0xc3,0xed,0xad,0x97,0x9b,0x65,0x27,0x70,0x3a,0x8b,0xf4,0xe5,0x85,0x6b,0x81,0xb0,0x44,0xf1,0xfc,0xc4,0xda,0xee,0x7d,0xda,0x31,0xc3,0xf4,0x97,0x15,0xca,0xfe,0x30,0x8f,0x0e,0x19,0xb7,0xa9,0x63,0x09,0xf6,0x67,0x79,0x3e,0xd4,0x15,0x55,0xd9,0x56,0x71,0xee,0x96,0x64,0xc4,0xdb,0x72,0x37,0x66,0xd7,0xbc,0x65,0x3c,0xc4,0x9b,0x5f,0xec,0x89,0x2e,0x1e,0x79,0x01,0xdb,0x06,0x71,0xf6,0x86,0x05,0x07,0xb6,0xe7,0x38,0xe2,0xd4,0x21,0x22,0x80,0x33,0x80,0xd3,0x82,0xf2,0x09,0xa5,0xcd,0xf3,0x29,0x02,0xa8,0xb7,0x38,0xcf,0x39,0x53,0x43,0x26,0x94,0x98,0xa4,0xc0,0x77,0x8e,0x47,0x0f,0x32,0x70,0x3d,0xc7,0x28,0xee,0x24,0x31,0x37,0xce,0x51,0xc9,0x56,0x74,0xf6,0x4b,0x80,0x50,0x16,0xb7,0x86,0x3d,0x05,0x84,0xce,0xf1,0xfc,0x1e,0x6f,0x2c,0x83,0xfd,0x1c,0x5e,0x1e,0xc8,0xba,0xcd,0xdd,0xd5,0xfe,0x90,0x32,0x46,0x11,0x49,0x85,0x1c,0x97,0x8a,0xa8,0xdf,0xcc,0xa4,0x53,0xbb,0xb6,0xb2,0x87,0xc6,0xf4,0xe2,0xac,0xf0,0xf2,0xe4,0x85,0x25,0x83,0xb1,0x7b,0x4e,0xb4,0x56,0x63,0x1d,0x1c,0xce,0xd9,0xff,0x25,0x52,0xcf,0x91,0xdc,0x4d,0x6f,0x75,0x5c,0x83,0x75,0xd3,0x09,0xb3,0x3c,0x31,0x08,0xe7,0xc7,0xf8,0x6c,0xae,0x38,0x9d,0x60,0xc9,0xd6,0xdc,0x2b,0xc4,0x02,0xfb,0x9a,0xfb,0x60,0xae,0x96,0x80,0x49,0x4f,0xdc,0x7b,0xf8,0x53,0x5a,0xfa,0x75,0xce,0x3e,0xa2,0x6b,0x4e,0xad,0xfa,0x8f,0x9d,0xd5,0x9e,0xf0,0xf0,0x48,0xe1,0xc3,0xb4,0x7b,0xdf,0xc6,0xf9,0xc4,0x31,0x36,0x83,0xc1,0xb7,0x09,0x5d,0xff,0x41,0x06,0x01,0xfb,0xa0,0xff,0xeb,0x6d,0x78,0x17,0xf4,0x56,0x37,0xe4,0x19,0xbb,0x98,0x60,0x6b,0xcf,0xa4,0x39,0xba,0x9d,0xbf,0xe6,0xca,0xf1,0xea,0x67,0xfb,0x33,0x00,0xb9,0xba,0x8e,0x77,0x19,0x84,0xff,0xb0,0xd6,0x64,0x79,0xc6,0x6f,0xe8,0xd2,0x65,0x50,0xf2,0x24,0x17,0xa8,0xae,0x13,0xcc,0xc3,0x89,0x64,0x18,0x99,0xea,0x8c,0x9c,0x43,0x0e,0x20,0x53,0x49,0xdb,0xa7,0x0d,0x96,0x9e,0x2c,0xb3,0xc7,0xf9,0x38,0x76,0x7e,0x59,0x8e,0x24,0x39,0xc3,0xd8,0xa3,0x6b,0x0c,0xf8,0xe6,0xcc,0x06,0xad,0x30,0x99,0x02,0x52,0x4d,0xcb,0xd1,0x65,0x06,0xa0,0x8d,0x3b,0x55,0x17,0xdf,0x71,0x79,0x67,0x10,0x6c,0xfc,0x89,0xc1,0xb0,0x74,0x80,0x42,0x11,0x39,0x6f,0x4f,0x30,0xcf,0xc2,0x7e,0x12,0xeb,0xbb,0x21,0x71,0x0b,0x11,0x05,0x22,0x35,0x21,0xd5,0xbb,0x9f,0xac,0x14,0x04,0x03,0x66,0x1f,0x8a,0x12,0x21,0xbf,0x25,0x7a,0x17,0x3f,0x3d,0x3c,0x95,0x4f,0xe6,0x11,0x8b,0x19,0x59,0x0b,0x9c,0x60,0x70,0xd1,0xa3,0xeb,0x83,0x6b,0x0b,0x61,0x84,0xc8,0xd2,0x72,0xc1,0xd0,0xe9,0x4f,0xbc,0x84,0x0e,0x23,0xb9,0xf6,0x27,0x91,0x37,0x65,0x1d,0xb0,0x14,0xeb,0xde,0x6a,0x99,0xae,0xe4,0x07,0xc1,0x85,0xb9,0xd9,0x7d,0x89,0xaa,0x91,0xdf,0xd6,0x1d,0xbc,0x48,0xf7,0xaa,0x7c,0xed,0x68,0xd2,0x56,0xd5,0x3f,0x26,0x1a,0xe1,0x3d,0xeb,0xfa,0xbf,0x5d,0x02,0xda,0x69,0xa1,0xf4,0xcf,0xd5,0x06,0xac,0x77,0xb8,0x3e,0x46,0x04,0xa4,0x60,0x4b,0xfa,0xef,0xd6,0xad,0x2e,0xed,0xf2,0x3b,0x5b,0x78,0x83,0x2f,0xc5,0x90,0x10,0xc8,0x5e,0xdc,0xfc,0x35,0x20,0x1d,0x5f,0xe0,0x54,0x19,0x35,0xcf,0x95,0x24,0xe2,0x28,0x7e,0x01,0x77,0x22,0xb0,0x19,0x7f,0xd9,0x68,0xa7,0x71,0x55,0x86,0x91,0xca,0xd1,0x6c,0x4d,0xa7,0x2f,0x24,0x2d,0x1d,0xdc,0x2d,0xdc,0x20,0x70,0x18};

const char fb000_d[] = {0xc4, 0xfa, 0xce, 0xb0, 0x00, 0x55, 0x08, 0x25, 0x27, 0xcd, 0xae, 0x14, 0x28, 0xbd, 0x52, 0x74, 0x01, 0x39, 0x25, 0x84, 0xbf, 0x0a, 0x00, 0x16, 0xd0, 0xf2, 0x3e, 0xef, 0x10, 0xeb, 0x61, 0x23, 0x5d, 0xee, 0xf7, 0xad, 0x05, 0xe7, 0x4e, 0xe4, 0xfb, 0xef, 0xe0, 0xb2, 0x3a, 0x80};
// const char fb001_d[] = {0xc1, 0xfa, 0xce, 0xb0, 0x01, 0x00, 0x08, 0x4c, 0xcc, 0x08, 0x55, 0x7f, 0x37, 0x79, 0x4e, 0x00, 0x16, 0x7f, 0xef, 0x7a, 0x50, 0x6d, 0xd0, 0x92, 0xf4, 0xe1, 0x2c, 0xd2, 0x3c, 0xd1, 0x52, 0xcd, 0x7b, 0xb3, 0x32, 0x95, 0x85, 0xe7, 0xd1};
// const char fb001_d[] = {0xcc, 0xfa, 0xce, 0xb0, 0x01, 0x00, 0x08, 0x4b, 0x1f, 0x8a, 0x65, 0xed, 0xb4, 0x58, 0x2c, 0x00, 0x16, 0x3c, 0x6a, 0x74, 0xd9, 0x11, 0x0e, 0xc4, 0xda, 0xb0, 0x78, 0x55, 0xa8, 0x41, 0x71, 0x32, 0x59, 0x6e, 0xf4, 0x24, 0xf0, 0x4a, 0xd5};
const char fb001_d[] = {0xcc, 0xfa, 0xce, 0xb0, 0x01, 0x00, 0x08, 0x50, 0x9a, 0x81, 0x51, 0xfd, 0xaf, 0xfc, 0x66, 0x00, 0x16, 0x64, 0xe8, 0x85, 0xf5, 0x2a, 0x29, 0xaa, 0xee, 0xd6, 0xc3, 0x89, 0x78, 0xe8, 0x28, 0xbb, 0xbe, 0xd6, 0x2b, 0x21, 0x55, 0x3b, 0x36};
// const char q050_d[] = {0xc2, 0x51, 0x30, 0x35, 0x30, 0x00, 0x08, 0xc6, 0x45, 0x89, 0x5e, 0xc0, 0x15, 0xa7, 0xe3, 0x00, 0x40, 0x18, 0xd3, 0x1b, 0xd7, 0x23, 0x05, 0x0a, 0x30, 0x79, 0xd4, 0xf8, 0xc2, 0x95, 0x61, 0xce, 0x3c, 0xed, 0x8d, 0x8c, 0xe6, 0xae, 0xf0, 0xc5, 0xc1, 0x4e};
const char q050_d[] = {0xc2, 0x51, 0x30, 0x35, 0x30, 0x00, 0x08, 0xca, 0xfd, 0x9f, 0x3e, 0x03, 0x60, 0x3c, 0xb2, 0x00, 0x45, 0x34, 0x74, 0x9c, 0x8e, 0x77, 0x52, 0xc5, 0x21, 0x9d, 0x95, 0x63, 0xb4, 0x0e, 0x9d, 0xde, 0xc5, 0xe7, 0x8c, 0x77, 0x4c, 0x00, 0x9c, 0x16, 0xcc, 0xed, 0x94, 0x97, 0xc6, 0xb6, 0x20, 0x41, 0x48, 0x82, 0x1e, 0xd8, 0xcc, 0xfe, 0x7f, 0xd7, 0xe9, 0x72, 0x40, 0x4d, 0xad, 0x60, 0xb3, 0x9a, 0xcc, 0x5d, 0x5f, 0xac, 0xfb, 0xd9, 0xda, 0xe5, 0x86, 0xa0, 0xd1, 0x0b, 0xee, 0x9f, 0xd0, 0x85, 0xd4, 0x1e, 0x6f, 0xbe, 0x3a, 0xc5, 0x82, 0xdb, 0x54, 0x66, 0x21, 0xb5, 0xe2, 0xff, 0xbe, 0x34, 0x38, 0x75, 0x48, 0x78, 0x3b, 0x76, 0x82, 0x51, 0x6a, 0xe6, 0x4a, 0xda, 0x1d, 0xb5, 0xf5, 0xac, 0x56, 0xa0, 0x69, 0x25, 0xb9, 0xe9, 0x2a, 0x62, 0xfe, 0x06, 0xf5, 0x3d, 0x75, 0x90, 0x40, 0xf6, 0x06, 0x22, 0x4e, 0x78, 0x18, 0xf2, 0x64, 0x59, 0x24, 0x00, 0x19, 0x0b, 0xf2, 0xa4, 0x42, 0x24, 0xf3, 0xd9, 0xf3, 0x67, 0x1d, 0x22, 0x1b, 0xd7, 0x7e, 0xc3, 0x50, 0x45, 0x35, 0x6a, 0xb1, 0x44, 0xf2, 0xe5, 0xe1, 0x4d, 0x06, 0x1d, 0x7d, 0xe9, 0x12, 0x4d, 0xa4, 0xf3, 0x2a, 0xe9, 0x5b, 0x5f, 0xf3, 0xf9, 0xa4, 0x03, 0x7e, 0x30, 0x8a, 0x3c, 0xd1, 0xc2, 0x85, 0x19, 0xc9, 0x64, 0x0a, 0x70, 0x9d, 0x55, 0x82, 0xf8, 0x2c, 0x0f, 0xcb, 0xec, 0xf6, 0x18, 0x31, 0xfb, 0xdc, 0xb8, 0x6a, 0x6f, 0x79, 0xc5, 0x27, 0xb3, 0x11, 0x25, 0xbd, 0xd8, 0x52, 0xc7, 0x69, 0x22, 0xa2, 0x4a, 0x7f, 0x3a, 0xda, 0x69, 0x9f, 0x56, 0x9e, 0x8f, 0x27, 0x2e, 0x8f, 0x26, 0x39, 0xe9, 0x8e, 0xbd, 0xf9, 0xca, 0xbd, 0x4f, 0x2e, 0x87, 0xd8, 0xd6, 0x6b, 0x50, 0x74, 0x6c, 0x1b, 0x86, 0x54, 0x6b, 0xeb, 0x15, 0x17, 0x63, 0x23, 0x4f, 0x7a, 0x4a, 0x7f, 0x45, 0x9e, 0xe8, 0xd1, 0x3f, 0x65, 0x54, 0x2c, 0x66, 0x5b, 0xee, 0x8e, 0x90, 0x29, 0x1f, 0xbb, 0x40, 0xd0, 0x36, 0x58, 0x82, 0x45, 0xb7, 0xff, 0xfc, 0xcf, 0x85, 0x8e, 0xa0, 0x9a, 0xdb, 0xef, 0x95, 0x0b, 0xc1, 0x6c, 0x48, 0x83, 0x3d, 0x80, 0x92, 0x34, 0xa8, 0x96, 0x60, 0x4d, 0x3d, 0xab, 0x3d, 0xb6, 0x17, 0x3c, 0xc3, 0xdf, 0x98, 0xa1, 0x38, 0x3e, 0xec, 0xa6, 0x0c, 0x1b, 0x5f, 0xea, 0xa6, 0xa5, 0xca, 0xc3, 0x4b, 0x32, 0xd4, 0xe5, 0xe8, 0x50, 0x92, 0xd7, 0xc5, 0x49, 0x02, 0x6f, 0xca, 0xe4, 0xd5, 0x32, 0xcc, 0xd4, 0x95, 0x4e, 0xb2, 0x9c, 0x23, 0x82, 0xd9, 0x1a, 0x6e, 0x84, 0x16, 0x3c, 0x43, 0xdd, 0xce, 0x51, 0x20, 0x24, 0x25, 0xb7, 0x1c, 0x88, 0x7a, 0xcf, 0x12, 0x1a, 0x28, 0xb0, 0xa7, 0xfe, 0x32, 0xea, 0xd7, 0xfb, 0x18, 0x35, 0x02, 0x79, 0x76, 0x68, 0x80, 0x2a, 0x4b, 0xce, 0x30, 0x83, 0xf6, 0xc1, 0x46, 0x60, 0x48, 0xda, 0xdf, 0x18, 0xfd, 0x1b, 0xf7, 0xa6, 0xf4, 0xf0, 0x08, 0x4e, 0x77, 0x53, 0x70, 0xbe, 0xd9, 0x6f, 0xf3, 0xfc, 0xb9, 0xa0, 0x12, 0xa4, 0x97, 0xcc, 0xdb, 0x2f, 0x8d, 0x9a, 0xea, 0x1e, 0x7f, 0x1b, 0x1a, 0xde, 0x12, 0xf7, 0xf4, 0xe9, 0x05, 0x90, 0xbf, 0x6e, 0x2c, 0xd9, 0xee, 0x36, 0x62, 0xb2, 0x26, 0x5c, 0x42, 0x1a, 0xec, 0xd4, 0x7b, 0xe4, 0x9a, 0xf2, 0x17, 0x63, 0x5d, 0xca, 0xd4, 0xc9, 0x45, 0x33, 0xa8, 0x68, 0xac, 0xc9, 0x5a, 0xaa, 0x9c, 0xfc, 0x09, 0xbf, 0x7a, 0x21, 0x3b, 0x05, 0x1f, 0x6e, 0x71, 0x0d, 0xeb, 0x44, 0xf9, 0x17, 0x34, 0x96, 0xc5, 0x7b, 0x3d, 0x9e, 0x8e, 0x53, 0xe5, 0xf5, 0x7b, 0x14, 0x36, 0xfb, 0x15, 0x59, 0xd0, 0xb7, 0xde, 0x22, 0x61, 0x53, 0xd6, 0xde, 0xa6, 0x02, 0x45, 0x73, 0x4b, 0x23, 0x17, 0x46, 0x49, 0x77, 0xf5, 0x1b, 0x93, 0xd7, 0x7c, 0x12, 0x01, 0xfd, 0xcb, 0x3e, 0xde, 0xd6, 0x90, 0x8b, 0xff, 0x48, 0xcc, 0x5b, 0x6f, 0x88, 0x1a, 0xf0, 0xa5, 0x95, 0x70, 0xcb, 0x19, 0x97, 0x6e, 0x32, 0xc1, 0xad, 0x3d, 0x0c, 0xb5, 0x0f, 0xa0, 0xed, 0xa1, 0x92, 0x3a, 0x01, 0xc6, 0xec, 0xcf, 0xa6, 0x8f, 0x87, 0x3c, 0x40, 0xf8, 0x61, 0x50, 0xb4, 0x04, 0x92, 0x11, 0x2f, 0x31, 0x3b, 0xf8, 0xca, 0x90, 0xae, 0x96, 0xc7, 0x01, 0x5e, 0xf9, 0x33, 0xe5, 0x86, 0x13, 0xba, 0x53, 0xa0, 0x02, 0xd9, 0x52, 0xcc, 0x9f, 0x81, 0x75, 0x84, 0xc6, 0xaf, 0xc8, 0x20, 0x21, 0x90, 0xaf, 0x7b, 0x19, 0x89, 0x28, 0xec, 0x0b, 0x9e, 0x68, 0xdd, 0xe0, 0x15, 0x2b, 0x54, 0x70, 0x83, 0x70, 0x28, 0x8f, 0xaf, 0xea, 0xc1, 0xb4, 0xba, 0xaf, 0x3f, 0x45, 0x66, 0xd6, 0x18, 0x15, 0x38, 0xb2, 0xf0, 0xfc, 0xaf, 0xeb, 0x2f, 0x3a, 0xef, 0x12, 0xef, 0x14, 0x31, 0xb5, 0x56, 0xdf, 0xd7, 0x6e, 0x73, 0x03, 0x93, 0x8e, 0x82, 0xd5, 0x4e, 0xac, 0x59, 0xa8, 0x5a, 0xac, 0x04, 0xb5, 0x8e, 0xb0, 0x67, 0x2c, 0xb3, 0x59, 0x62, 0xd7, 0x93, 0x1f, 0xc0, 0x39, 0x5b, 0xf8, 0x76, 0xec, 0xee, 0xb5, 0x4c, 0xa9, 0xda, 0xb1, 0x68, 0xeb, 0x26, 0x88, 0x3c, 0x2a, 0x7f, 0xc5, 0xd0, 0xfc, 0x3a, 0xec, 0x1a, 0x97, 0xf9, 0x5e, 0x78, 0xb9, 0x2d, 0xea, 0x1b, 0x0d, 0x5d, 0x93, 0x9e, 0x73, 0x6c, 0xdd, 0x18, 0x61, 0xf9, 0x70, 0x87, 0x72, 0xc4, 0xda, 0x7f, 0x19, 0x3e, 0xc9, 0x48, 0x1e, 0xfe, 0x95, 0xe1, 0x6a, 0xad, 0x2d, 0x1d, 0x82, 0xe8, 0x4e, 0xda, 0xcb, 0xfd, 0xf2, 0x19, 0xba, 0x67, 0x26, 0xe4, 0x18, 0x49, 0x39, 0xaa, 0x15, 0x5c, 0x3e, 0x41, 0xba, 0x41, 0x97, 0xe7, 0x28, 0xba, 0xae, 0x6a, 0x38, 0x99, 0xfa, 0xc6, 0x6d, 0x1e, 0x82, 0xf2, 0x12, 0xc6, 0xf5, 0x50, 0xc4, 0x53, 0xd9, 0xae, 0x4a, 0xa7, 0x29, 0x3e, 0x86, 0xcf, 0x99, 0xaa, 0xca, 0x23, 0x6c, 0x84, 0x5f, 0x6c, 0x49, 0x01, 0x13, 0xbe, 0x0e, 0xbe, 0x91, 0x3a, 0x59, 0x71, 0x4e, 0x30, 0xc6, 0x2f, 0xc5, 0xc5, 0xf9, 0x52, 0x75, 0x7a, 0x64, 0xec, 0x53, 0xf2, 0xe7, 0x10, 0x71, 0x2f, 0x79, 0xea, 0x72, 0x52, 0xf2, 0x87, 0x8a, 0xab, 0x8b, 0xa0, 0x9d, 0xa6, 0x5a, 0xd4, 0x8c, 0xdc, 0xd2, 0xf4, 0x0b, 0x0e, 0x98, 0xbf, 0x6a, 0xb5, 0x75, 0x0b, 0x17, 0x98, 0x7a, 0x3b, 0x25, 0xf2, 0x7c, 0x64, 0x95, 0x20, 0x96, 0x71, 0x54, 0xc9, 0xe8, 0xd8, 0x05, 0xba, 0xcf, 0xb1, 0xc1, 0x4a, 0xc8, 0x5e, 0xa8, 0x5b, 0x87, 0x5d, 0xda, 0xf7, 0x36, 0xf0, 0x46, 0xbd, 0x9e, 0x32, 0x36, 0x84, 0xa7, 0xa5, 0x3c, 0xbd, 0x89, 0x5e, 0xd0, 0xb0, 0xfd, 0x27, 0x20, 0x0e, 0x91, 0x0d, 0xc8, 0x22, 0x3e, 0x44, 0x67, 0xf2, 0xf5, 0xdd, 0x1e, 0x29, 0x77, 0xf9, 0xf2, 0x4d, 0x33, 0xe2, 0xe8, 0xfa, 0x30, 0xb6, 0x20, 0xb5, 0x7d, 0x06, 0x7f, 0x47, 0x86, 0x32, 0xda, 0x53, 0xaf, 0x73, 0x33, 0x13, 0xd1, 0xb4, 0x9e, 0x49, 0x35, 0xb7, 0x94, 0xc6, 0x1c, 0xad, 0x6e, 0xa1, 0x8b, 0x93, 0xea, 0x6f, 0x56, 0x61, 0xd8, 0x0d, 0x1a, 0x37, 0x6c, 0xcc, 0x37, 0x8e, 0x78, 0xbf, 0x0e, 0xe4, 0x51, 0x0a, 0xb6, 0xcf, 0x65, 0xde, 0xad, 0xb7, 0xe8, 0xa1, 0x98, 0x5d, 0x11, 0xc1, 0xdc, 0xde, 0x3d, 0x53, 0x39, 0xad, 0x02, 0x45, 0x1e, 0x8d, 0x76, 0x84, 0x30, 0xcd, 0xc7, 0x70, 0xa8, 0x69, 0xba, 0xa3, 0xa6, 0xdd, 0x54, 0x59, 0x1e, 0x27, 0xc7, 0xbb, 0xd8, 0xe7, 0x3a, 0xa3, 0xf3, 0xf2, 0xf5, 0x7f, 0x8f, 0x1a, 0x4e, 0xce, 0x23, 0x3e, 0xaf, 0x35, 0x4e, 0x7a, 0x25, 0x93, 0x20, 0x53, 0x68, 0xff, 0x9d, 0x9d, 0xd8, 0x0d, 0x8c, 0xaa, 0x00, 0xc4, 0x96, 0x64, 0x57, 0x12, 0x56, 0x82, 0xd2, 0xaf, 0x28, 0xa3, 0x5d, 0x96, 0x65, 0x20, 0xbf, 0x60, 0x9a, 0xb5, 0xe8, 0x34, 0x6c, 0x24, 0x85, 0xa7, 0x9f, 0xed, 0xcf, 0xd9, 0x90, 0x57, 0xf3, 0x4d, 0x64, 0xeb, 0x3b, 0x30, 0x05, 0x56, 0x43, 0x23, 0x23, 0xbb, 0x98, 0xea, 0xde, 0x64, 0x89, 0x39, 0xf5, 0x75, 0xdd, 0x57, 0xeb, 0xc3, 0x67, 0xda, 0x60, 0x0a, 0x44, 0xf6, 0x57, 0x96, 0xf0, 0x23, 0x4e, 0xa0, 0xa2, 0x87, 0x9a, 0xc2, 0x47, 0xd2, 0xfe, 0xae, 0xfe, 0x23, 0x9a, 0xf7, 0xce, 0x62, 0x3a, 0xdb, 0x22, 0x4f, 0x38, 0x55, 0xde, 0x67, 0x6b, 0x38, 0x29, 0xab, 0x50, 0x8e, 0xd0, 0xc3, 0x76, 0xd4, 0x9e, 0x3c, 0x91, 0x1b, 0x4f, 0xc0, 0x05, 0x1e, 0x4f, 0xb3, 0xec, 0x14, 0x67, 0xbd, 0x8c, 0xf5, 0xa7, 0x48, 0x15, 0x27, 0x19, 0x99, 0xc4, 0x6f, 0xda, 0x93, 0x64, 0xcb, 0x11, 0x05, 0xd2, 0x39, 0x34, 0xf0, 0xb9, 0x44, 0x6a, 0xc2, 0xe2, 0x2f, 0x4c, 0xd6, 0x49, 0xc6, 0x51, 0x91, 0xc2, 0x14, 0xac, 0xfd, 0x2a, 0x45, 0x97, 0x9f, 0xcb, 0xeb, 0xa1, 0x64, 0x90, 0x69, 0x1b, 0x8a, 0x73, 0xbb, 0xdc, 0xd5, 0xab, 0xee, 0x55, 0x69, 0x20, 0xa0, 0x74, 0x96, 0x19, 0xd3, 0x6c, 0x11, 0x1b, 0x45, 0x99, 0xb4, 0x4c, 0x13, 0xd4, 0x13, 0xf5, 0xb4, 0x0f, 0x06, 0x68, 0xfa, 0xc5, 0xc8, 0x91, 0x7f, 0xe2, 0x1a, 0x1a, 0xc0, 0x01, 0xec, 0x2e, 0x65, 0xc6, 0xc3, 0x0c, 0x21, 0x92, 0xc1, 0x22, 0x82, 0x0a, 0xda, 0x74, 0x10, 0x4f, 0x64, 0x42, 0x5f, 0xec, 0x20, 0x33, 0xb3, 0x32, 0x18, 0xc9, 0x85, 0x14, 0xd8, 0xf6, 0xdf, 0x4d, 0x8e, 0x91, 0x0e, 0x77, 0xec, 0x18, 0x1f, 0x57, 0x2b, 0x7c, 0x60, 0xbd, 0x52, 0x68, 0xd3, 0xc9, 0xed, 0xcf, 0x98, 0xa3, 0x0b, 0x6d, 0x88, 0xc4, 0x16, 0xb4, 0x72, 0x2e, 0x05, 0x60, 0xf0, 0xbf, 0xb7, 0x39, 0x1e, 0x7c, 0xe8, 0x61, 0x86, 0x07, 0x50, 0x5c, 0xf1, 0x26, 0x22, 0x94, 0x98, 0x85, 0x52, 0x88, 0xb6, 0x9a, 0x73, 0x87, 0xcb, 0x12, 0x5e, 0x3f, 0x2e, 0x82, 0x83, 0xec, 0x70, 0x5a, 0xd2, 0xbf, 0x90, 0x68, 0x8c, 0x9e};

Packet packets[] =
    {
        {fb000_u, sizeof(fb000_u), DI_UPLINK,   "fb000 uplink"},          // 0
        {fb001_u, sizeof(fb001_u), DI_UPLINK,   "fb001 uplink"},          // 1
        {fb002_u, sizeof(fb002_u), DI_UPLINK,   "fb002 uplink"},          // 2
        {q050_u,  sizeof(q050_u),  DI_UPLINK,   "q050 uplink"},           // 3
        {t050_u,  sizeof(t050_u),  DI_UPLINK,   "t050 uplink"},           // 4

        {fb000_d, sizeof(fb000_d), DI_DOWNLINK, "fb000 downlink"},        // 5
        {fb001_d, sizeof(fb001_d), DI_DOWNLINK, "fb001 downlink"},        // 6
        {q050_d,  sizeof(q050_d),  DI_DOWNLINK, "q050 downlink"}          // 7
    };

typedef enum QuicVersion_T
{
    QV_FB000 = 0,
    QV_FB001,
    QV_FB002,
    QV_Q050,
    QV_T050,
    QV_UNKNOWN
} QuicVersion;

typedef struct QuicVersionInfo_T
{
    QuicVersion version;
    const unsigned char initialSalt[20];
    int initialSaltLen;
    int formatType;
    const char *versionStr;
} QuicVersionInfo;

const QuicVersionInfo quicVersionInfoMap[] =
    {
        {QV_FB000, {0xef,0x4f,0xb0,0xab,0xb4,0x74,0x70,0xc4,0x1b,0xef,0xcf,0x80,0x31,0x33,0x4f,0xae,0x48,0x5e,0x09,0xa0}, 20, 1, "FB000"},
        {QV_FB001, {0x7f,0xbc,0xdb,0x0e,0x7c,0x66,0xbb,0xe9,0x19,0x3a,0x96,0xcd,0x21,0x51,0x9e,0xbd,0x7a,0x02,0x64,0x4a}, 20, 2, "FB001"},
        {QV_FB002, {0xc3,0xee,0xf7,0x12,0xc7,0x2e,0xbb,0x5a,0x11,0xa7,0xd2,0x43,0x2b,0xb4,0x63,0x65,0xbe,0xf9,0xf5,0x02}, 20, 2, "FB002"},
        {QV_Q050,  {0x50,0x45,0x74,0xef,0xd0,0x66,0xfe,0x2f,0x9d,0x94,0x5c,0xfc,0xdb,0xd3,0xa7,0xf0,0xd3,0xb5,0x6b,0x45}, 20, 2, "Q050"},
        {QV_T050,  {0x7f,0xf5,0x79,0xe5,0xac,0xd0,0x72,0x91,0x55,0x80,0x30,0x4c,0x43,0xa2,0x36,0x7c,0x60,0x48,0x83,0x10}, 20, 2, "T050"}
    };

const QuicVersionInfo* getQuicVersionInfo(uint32_t theVersion)
{
    switch (theVersion)
    {
        case 0xfaceb000:
            return &quicVersionInfoMap[QV_FB000];
        case 0xfaceb001:
            return &quicVersionInfoMap[QV_FB001];
        case 0xfaceb002:
            return &quicVersionInfoMap[QV_FB002];
        case 0x51303530:
            return &quicVersionInfoMap[QV_Q050];
        case 0x54303530:
            return &quicVersionInfoMap[QV_T050];
        default:
            return NULL;
    }
}

char getVarLenInt(const unsigned char *buf, int len, uint64_t *value)
{
    unsigned char bits2 = (buf[0] & 0xc0) >> 6;
    int varLen = 1 << bits2;
    if (varLen > len)
    {
        return -1;
    }

    switch (bits2)
    {
        case 0:
        {
            *value = buf[0] & 0x3f;
            break;
        }
        case 1:
        {
            *value = be16toh(*(uint16_t *)buf) & 0x3fff;
            break;
        }
        case 2:
        {
            *value = be32toh(*(uint32_t *)buf) & 0x3fffffff;
            break;
        }
        case 3:
        {
            *value = be64toh(*(uint64_t *)buf) & 0x3fffffffffffffff;
            break;
        }
    }
    return varLen;
}

int parseFrameTls1_3(const unsigned char* thePlainText, 
                     int                  thePlainTextLen,
                     unsigned char*       theSni,
                     int*                 theSniLen,
                     unsigned char*       theAlpn,
                     int*                 theAlpnLen)
{
    *theSniLen = 0;
    *theAlpnLen = 0;

    if ( NULL == thePlainText || thePlainTextLen < 2)
    {
        return 1;
    }
    int offset = 0;
    char frameType = thePlainText[0];
    offset += 1;
    if (frameType != 0x06 && frameType != 0x08)
    {
        return 2;
    }
    // offset
    int64_t offsetFieldLength = 0;
    int byteLen = getVarLenInt(thePlainText, thePlainTextLen - offset, &offsetFieldLength);
    if (byteLen <= 0)
    {
        return 3;
    }
    offset += byteLen;
    if ((offset + offsetFieldLength) > thePlainTextLen)
    {
        return 4;
    }
    // length
    int64_t length = 0;
    byteLen = getVarLenInt(thePlainText + offset, thePlainTextLen - offset, &length);
    if (byteLen <= 0)
    {
        return 5;
    }
    offset += byteLen;
    if (length < (1+37+1+1) || (offset + length) > thePlainTextLen)
    {
        return 6 ;
    }
    // message type
    char messageType = thePlainText[offset++];
    if (messageType != 0x01) // not CHLO
    {
        return 7;
    }

    // skip: length(3), protocolVersion(2), random(32)
    offset += 37;
    // legcySession
    offset += 1 + (int) thePlainText[offset];
    if ((offset + 2) > thePlainTextLen)
    {
        return 8;
    }
    // cipher suite
    offset += 2 + be16toh(*(uint16_t *)(thePlainText + offset));
    if ((offset + 2) > thePlainTextLen)
    {
        // Incompleted frame, missing cipher suite.
        return 0;
    }
    // legacy compression method
    offset += 1 + (int) thePlainText[offset];
    // extensions
    if ( (offset + 2) > thePlainTextLen)
    {
        // Incompleted frame, missing extension.
        return 0;
    }
    int extensionsLength = be16toh(*(uint16_t *)(thePlainText + offset));
    offset += 2;
    int extensionOffset = 0;
    if ((offset + extensionsLength) > thePlainTextLen)
    {
        // Incompleted frame, missing extension.
        return 0;
    }
    const char *extensionBuffer = thePlainText + offset;
    while (extensionsLength > extensionOffset)
    {
        if ((extensionOffset+4) > extensionsLength)
        {
            return 0;
        }
        // extension type
        int extensionType = be16toh(*(uint16_t *)(extensionBuffer + extensionOffset));
        extensionOffset += 2;
        // extension data
        int extensionDataLength = be16toh(*(uint16_t *)(extensionBuffer + extensionOffset));
        extensionOffset += 2;
        if ((extensionOffset + extensionDataLength) > extensionsLength )
        {
            return 0;
        }
        int dataOffset = 0;
        const char *dataBuffer = extensionBuffer + extensionOffset;
        if (extensionType == 0) // SNI
        {
            // list length
            dataOffset += 2;
            while (extensionDataLength > dataOffset)
            {
                if (extensionDataLength < (dataOffset + 3))
                {
                    return 0;
                }
                // type
                char sniType = dataBuffer[0];
                dataOffset += 1;
                // length
                int sniLength = be16toh(*(uint16_t *)(dataBuffer + dataOffset));
                dataOffset += 2;
                if (sniLength > (extensionDataLength-dataOffset))
                {
                    return 0;
                }
                if (sniType == 0x00 && sniLength > 0) 
                {
                    memcpy(theSni, dataBuffer + dataOffset, sniLength);
                    *theSniLen = sniLength;
                }
                dataOffset += sniLength;
            }
        }
        else if (extensionType == 16) // ALPN
        {
            // list length
            dataOffset += 2;
            while (extensionDataLength > dataOffset)
            {
                if (extensionDataLength < (dataOffset + 2))
                {
                    return 0;
                }
                // length
                int64_t alpnLength = 0;
                int bytesConsumed = getVarLenInt(dataBuffer + dataOffset, extensionDataLength - dataOffset, &alpnLength);
                if (bytesConsumed < 0)
                {
                    return 0;
                }
                dataOffset += bytesConsumed;
                if (alpnLength > (extensionDataLength-dataOffset))
                {
                    return 0;
                }
                if(alpnLength > 0)
                {
                    memcpy(theAlpn, dataBuffer + dataOffset, alpnLength); 
                    *theAlpnLen = alpnLength;
                    dataOffset += alpnLength;
                }
            }
        }
        extensionOffset += extensionDataLength;
    }
    return 0;
}

#define MIN(a, b) ( ((a) < (b)) ? (a) : (b) )
#define getStreamTagNumbers(theQuicStreamBuf, off)\
    (*(unsigned short *)(theQuicStreamBuf + off))
#define getStreamTagOffsetEnd(theQuicStreamBuf, off)\
    (*(unsigned int *)(theQuicStreamBuf + off))

int tagFind(const char *theBuf,
            const int   theBufLen,
            const int   theTag)
{
    const int length = (theBufLen - 4);
    for (int offset = 0; offset <= length; ++offset)
    {
        if (theTag == (*(int *) (theBuf + offset)))
        {
            return offset;
        }
    }
    return -1;
}



int parseFrameCrypto(const unsigned char* thePlainText, 
                     int                  thePlainTextLen,
                     unsigned char*       theSni,
                     int*                 theSniLen,
                     unsigned char*       theAlpn,
                     int*                 theAlpnLen)
{
    *theSniLen = 0;
    *theAlpnLen = 0;
    if (thePlainTextLen < 4)
    {
        return 1;
    }

    int theOffset = 0;
    int oldOffset = theOffset;
    // parser Chlo
    static const char *tagCHLO = "CHLO";
    int chloIndex = 0;
    const int offsetLength = MIN((thePlainTextLen - oldOffset), 128);
    chloIndex = tagFind(thePlainText+ oldOffset, offsetLength, (*(int *) tagCHLO));
    if (chloIndex < 0)
    {
        return 2;
    }
    else
    {
        theOffset = oldOffset + chloIndex;
    }
    theOffset += 4;
    //Tag number 2 bytes
    theOffset += 2;
    if (thePlainTextLen < theOffset)
    {
        return 0;
    }
    const unsigned int tagNumber = (getStreamTagNumbers(thePlainText, (theOffset - 2)));
    //Padding 2 bytes
    theOffset += 2;
    //total tags flag length
    theOffset += tagNumber * 8;
    if (thePlainTextLen < theOffset)
    {
        return 0;
    }

    //parser tag SNI
    const char *value = thePlainText + theOffset;
    const char *tagBuf = thePlainText + oldOffset;
    const int tagBufLen = thePlainTextLen - oldOffset;
    if (tagBufLen < 20)
    {
        return 0;
    }
    static const char *tagSNI = "SNI\0";
    const int sniOffsetEndIndex = tagFind(tagBuf, tagBufLen, (*(int *) tagSNI));
    if (8 <= sniOffsetEndIndex)
    {
        const int padOffsetEndIndex = sniOffsetEndIndex - 8;
        const int padOffsetEnd = (getStreamTagOffsetEnd(tagBuf, padOffsetEndIndex + 4));
        const int sniOffsetEnd = (getStreamTagOffsetEnd(tagBuf, sniOffsetEndIndex + 4));
        if (0 <= padOffsetEnd && padOffsetEnd < sniOffsetEnd &&  \
                sniOffsetEnd < (thePlainTextLen - theOffset))
        {
            //G-QUIC stream frame
            const int length = MIN((sniOffsetEnd - padOffsetEnd), 1024);
            memcpy(theSni, value + padOffsetEnd, length);
            *theSniLen = length;
        }
    }
    return 0;
}


/*
 * format type #1:
 *   +-+-+-+-+-+-+-+-+
 *   |1|1| 0 |R R|P P|
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                         Version (32)                          |
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |DCIL(4)|SCIL(4)|
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |               Destination Connection ID (0/32..144)         ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                 Source Connection ID (0/32..144)            ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                         Token Length (i)                    ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                            Token (*)                        ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                           Length (i)                        ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                    Packet Number (8/16/24/32)               ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                          Payload (*)                        ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *
 * format type #2:
 *   +-+-+-+-+-+-+-+-+
 *   |1|1| 0 |R R|P P|
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                         Version (32)                          |
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   | DCID Len (8)  |
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |               Destination Connection ID (0..160)            ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   | SCID Len (8)  |
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                 Source Connection ID (0..160)               ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                         Token Length (i)                    ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                            Token (*)                        ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                           Length (i)                        ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                    Packet Number (8/16/24/32)               ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                          Payload (*)                        ...
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
*/

int parse(const unsigned char *buffer,
          int                  bufferLen,
          Direction            direction)
{
    printf("bufferLen[%d], direction[%s]\n", bufferLen, direction == DI_UPLINK ? "uplink" : "downlink");    
    int offset = 0;

    // 1) parse flag, version, get quicVersionInfo
    if (offset + 5 > bufferLen)    // 1 (flag) + 4 (version)
    {
        return 1;
    }
    unsigned char flag = buffer[offset];
    ++offset;

    if ((flag & 0xf0) != 0xc0) 
    {
        return 3;
    }

    uint32_t version = be32toh(*(uint32_t *)(buffer + offset));
    offset += 4;

    const QuicVersionInfo *quicVersionInfo = getQuicVersionInfo(version);
    if (quicVersionInfo == NULL)
    {
        return 2;
    }

    printf("flag[0x%02x], version[0x%04x], versionStr[%s]\n", flag, version, quicVersionInfo->versionStr);

    // 2) parse DCID Len, DCID, SCID Len, SCID
    char dcidLen = 0;
    char scidLen = 0;
    const unsigned char *dcid = 0;
    const unsigned char *scid = 0;

    switch (quicVersionInfo->formatType)
    {
        case 1:
        {
            if (offset + 1 > bufferLen)    // DCIL + SCIL
            {
                return 4;
            }
            dcidLen = buffer[offset] >> 4;
            scidLen = buffer[offset] & 0x0f;
            ++offset;

            if (dcidLen == 0)
            {
                return 13;
            }
            dcidLen += 3;
            if (scidLen > 0)
            {
                scidLen += 3;
            }

            if (offset + dcidLen + scidLen > bufferLen)    // DCID + SCID
            {
                return 12;
            }
            dcid = buffer + offset;
            offset += dcidLen;
            if (scidLen > 0)
            {
                scid = buffer + offset;
                offset += scidLen;
            }

            break;
        }
        case 2:
        {
            if (offset + 1 > bufferLen)    // DCID Len
            {
                return 6;
            }
            dcidLen = buffer[offset];
            ++offset;
            if (dcidLen > 20)              // DCID is 160bits at most
            {
                return 7;
            }

            if (offset + dcidLen > bufferLen)    // DCID
            {
                return 8;
            }

            if (dcidLen > 0)
            {
                dcid = buffer + offset;
                offset += dcidLen;
            }

            if (offset + 1 > bufferLen)    // SCID Len
            {
                return 9;
            }
            scidLen = buffer[offset];
            ++offset;
            if (scidLen > 20)    // SCID is 160bits at most
            {
                return 10;
            }

            if (offset + scidLen > bufferLen)    // SCID
            {
                return 11;
            }
            if (scidLen > 0)
            {
                scid = buffer + offset;
                offset += scidLen;
            }

            break;
        }
        default:
        {
            return 3;
        }
    }

    printf("dcidLen[%d]\n", dcidLen);
    printf("scidLen[%d]\n", scidLen);
    if (dcidLen > 0)
    {
        printBytes(dcid, dcidLen, "dcid[", "]\n");
    }
    if (scidLen > 0)
    {
        printBytes(scid, scidLen, "scid[", "]\n");
    }

    // 3) parse Token Len, Token, Length
    uint64_t tokenLen = 0;
    const unsigned char *token = 0;
    char varLen = getVarLenInt(buffer + offset, bufferLen - offset, &tokenLen);
    if (varLen < 0)
    {
        return 14;
    }
    offset += varLen;

    if (offset + tokenLen > bufferLen)
    {
        return 15;
    }
    token = buffer + offset;
    offset += tokenLen;

    printf("tokenLen[%lu], varLen[%d]\n", tokenLen, varLen);
    if (tokenLen > 0)
    {
        printBytes(token, tokenLen, "token[", "]\n");
    }

    uint64_t length = 0;
    varLen = getVarLenInt(buffer + offset, bufferLen - offset, &length);
    if (varLen < 0)
    {
        return 16;
    }
    offset += varLen;
    if (offset + length > bufferLen)    // length: packet number + payload
    {
        return 17;
    }

    printf("length[%lu], varLen[%d]\n", length, varLen);

    // 4.1) generate: initial secret, 
    const unsigned char *cid = 0;
    char                 cidLen = 0;
    if (direction == DI_UPLINK)
    {
        cid = dcid;
        cidLen = dcidLen;
    }
    else
    {
        cid = scid;
        cidLen = scidLen;
    }

    cid = "\x09\x25\x27\xcd\xae\x14\x28\xbd";

    unsigned char initialSecret[64];
    int           initialSecretLen;
    if (0 != hkdfExtract(quicVersionInfo->initialSalt, 
                         quicVersionInfo->initialSaltLen,
                         cid,
                         cidLen,
                         initialSecret,
                         &initialSecretLen))
    {
        return 18;
    }

    #ifdef TEST
    const unsigned char testSalt[20] = {0xc3,0xee,0xf7,0x12,0xc7,0x2e,0xbb,0x5a,0x11,0xa7,0xd2,0x43,0x2b,0xb4,0x63,0x65,0xbe,0xf9,0xf5,0x02};
    const unsigned char testDcid[8] = {0x83,0x94,0xc8,0xf0,0x3e,0x51,0x57,0x08};
    if (0 != hkdfExtract(testSalt,
                         sizeof(testSalt),
                         testDcid,
                         sizeof(testDcid),
                         initialSecret,
                         &initialSecretLen))
    {
        return 18;
    }
    #endif

    printBytes(quicVersionInfo->initialSalt, 
               quicVersionInfo->initialSaltLen,
               "initialSalt[",
               "]\n");
    printf("initialSaltLen[%d]\n", quicVersionInfo->initialSaltLen);
    printBytes(initialSecret,
               initialSecretLen,
               "initialSecret[",
               "]\n");
    printf("initialSecretLen[%d]\n", initialSecretLen);

    unsigned char key[16];
    const int     keyLen = 16;
    unsigned char iv[12];
    const int     ivLen = 12;
    unsigned char hp[16];
    const int     hpLen = 16;
    if (direction == DI_UPLINK)
    {
        // 4.2) generate client_initial_secret
        unsigned char clientInitialSecret[32];
        int           clientInitialSecretLen = 32;
        unsigned char clientInitialSecretLabel[] = "client in";
        unsigned char context[] = "";
        
        if (0 != hkdfExpandLabel(initialSecret,
                                 initialSecretLen,
                                 clientInitialSecretLabel,
                                 strlen(clientInitialSecretLabel),
                                 context,
                                 strlen(context),
                                 clientInitialSecretLen,
                                 clientInitialSecret))
        {
            return 19;
        }

        printBytes(clientInitialSecret,
                   clientInitialSecretLen,
                   "clientInitialSecret[",
                   "]\n");
        printf("clientInitialSecretLen[%d]\n", clientInitialSecretLen);

        // 4.3) generate client_key
        unsigned char clientKeyLabel[] = "quic key";
        
        if (0 != hkdfExpandLabel(clientInitialSecret,
                                 clientInitialSecretLen,
                                 clientKeyLabel,
                                 strlen(clientKeyLabel),
                                 context,
                                 strlen(context),
                                 keyLen,
                                 key))
        {
            return 20;
        }

        printBytes(key,
                   keyLen,
                   "clientKey[",
                   "]\n");
        printf("clientKeyLen[%d]\n", keyLen);

        // 4.4) generate client_iv
        unsigned char clientIvLabel[] = "quic iv";
        
        if (0 != hkdfExpandLabel(clientInitialSecret,
                                 clientInitialSecretLen,
                                 clientIvLabel,
                                 strlen(clientIvLabel),
                                 context,
                                 strlen(context),
                                 ivLen,
                                 iv))
        {
            return 21;
        }

        printBytes(iv,
                   ivLen,
                   "clientIv[",
                   "]\n");
        printf("clientIvLen[%d]\n", ivLen);
        // 4.5) generate client_hp
        unsigned char clientHpLabel[] = "quic hp";
        
        if (0 != hkdfExpandLabel(clientInitialSecret,
                                 clientInitialSecretLen,
                                 clientHpLabel,
                                 strlen(clientHpLabel),
                                 context,
                                 strlen(context),
                                 hpLen,
                                 hp))
        {
            return 22;
        }

        printBytes(hp,
                   hpLen,
                   "clientHp[",
                   "]\n");
        printf("clientHpLen[%d]\n", hpLen);
    }
    else // direction == DI_DOWNLINK
    {
        // 4.6) generate server_initial_secret
        unsigned char serverInitialSecret[32];
        int           serverInitialSecretLen = 32;
        unsigned char serverInitialSecretLabel[] = "server in";
        unsigned char context[] = "";
        
        if (0 != hkdfExpandLabel(initialSecret,
                                 initialSecretLen,
                                 serverInitialSecretLabel,
                                 strlen(serverInitialSecretLabel),
                                 context,
                                 strlen(context),
                                 serverInitialSecretLen,
                                 serverInitialSecret))
        {
            return 23;
        }

        printBytes(serverInitialSecret,
                   serverInitialSecretLen,
                   "serverInitialSecret[",
                   "]\n");
        printf("serverInitialSecretLen[%d]\n", serverInitialSecretLen);

        // 4.7) generate server_key
        unsigned char serverKeyLabel[] = "quic key";
        
        if (0 != hkdfExpandLabel(serverInitialSecret,
                                 serverInitialSecretLen,
                                 serverKeyLabel,
                                 strlen(serverKeyLabel),
                                 context,
                                 strlen(context),
                                 keyLen,
                                 key))
        {
            return 24;
        }

        printBytes(key,
                   keyLen,
                   "serverKey[",
                   "]\n");
        printf("serverKeyLen[%d]\n", keyLen);

        // 4.8) generate server_iv
        unsigned char serverIvLabel[] = "quic iv";
        
        if (0 != hkdfExpandLabel(serverInitialSecret,
                                 serverInitialSecretLen,
                                 serverIvLabel,
                                 strlen(serverIvLabel),
                                 context,
                                 strlen(context),
                                 ivLen,
                                 iv))
        {
            return 25;
        }

        printBytes(iv,
                   ivLen,
                   "serverIv[",
                   "]\n");
        printf("serverIvLen[%d]\n", ivLen);

        // 4.9) generate server_hp
        unsigned char serverHpLabel[] = "quic hp";
        
        if (0 != hkdfExpandLabel(serverInitialSecret,
                                 serverInitialSecretLen,
                                 serverHpLabel,
                                 strlen(serverHpLabel),
                                 context,
                                 strlen(context),
                                 hpLen,
                                 hp))
        {
            return 26;
        }

        printBytes(hp,
                   hpLen,
                   "serverHp[",
                   "]\n");
        printf("serverHpLen[%d]\n", hpLen);
    }

    // 5.1) generate mask
    if (offset + 4 + 16 > bufferLen)    // 4 (sample offset) + 16 (sample length)
    {
        return 27;
    }
    const unsigned char *sample = buffer + offset + 4;
    unsigned char mask[16];
    int maskLen;

    if (0 != ecbEncrypt(sample,
                        16,
                        hp,
                        mask,
                        &maskLen))
    {
        return 28;
    }

    #ifdef TEST
    direction = DI_UPLINK;
    const unsigned char testSample[16] = {0x53,0x50,0x64,0xa4,0x26,0x8a,0x0d,0x9d,0x7b,0x1c,0x9d,0x25,0x0a,0xe3,0x55,0x16};
    if (0 != ecbEncrypt(testSample,
                        16,
                        hp,
                        mask,
                        &maskLen))
    {
        return 28;
    }
    #endif

    printBytes(sample,
               16,
               "sample[",
               "]\n");
    printf("sampleLen[%d]\n", 16);

    printBytes(mask,
               maskLen,
               "mask[",
               "]\n");
    printf("maskLen[%d]\n", maskLen);

    #ifdef TEST
    return 0;
    #endif

    // 5.2) get packet number length, packet number
    unsigned char header0 = flag ^ (mask[0] & 0x0f);
    uint8_t packetNumberLen = (header0 & 0x03) + 1;

    if (offset + packetNumberLen > bufferLen)
    {
        return 29;
    }

    unsigned char packetNumber[4];
    for (int i = 0; i < packetNumberLen; ++i)
    {
        packetNumber[i] = buffer[offset + i] ^ mask[1 + i];
    }

    offset += packetNumberLen;

    printBytes(packetNumber,
               packetNumberLen,
               "packetNumber[",
               "]\n");
    printf("packetNumberLen[%d]\n", packetNumberLen);

    // 5.3) get nonce
    unsigned char nonce[12];
    int nonceLen = 12;
    memset(nonce, 0, sizeof(nonce) - packetNumberLen);
    memcpy(nonce + 12 - packetNumberLen, packetNumber, packetNumberLen);
    for (int i = 0; i < sizeof(nonce); ++i)
    {
        nonce[i] ^= iv[i];
    }

    printBytes(nonce,
               nonceLen,
               "nonce[",
               "]\n");
    printf("nonceLen[%d]\n", nonceLen);

    // 5.4) decrypt payload
    const unsigned char *payload = buffer + offset;
    if (length < packetNumberLen)
    {
        return 30;
    }
    int payloadLen = length - packetNumberLen;

    printChars(payload,
               payloadLen,
               "payload:\n",
               0);
    printf("payloadLen[%d], offset[%d]\n", payloadLen, offset);

    unsigned char plainText[4096];
    int           plainTextLen;

    int ret;
    ret = gcmDecrypt(payload,
                     payloadLen,
                     0,     // theAad
                     0,     // theAadLen
                     key,
                     nonce,
                     sizeof(nonce),
                     0,     // theTag
                     0,     // theTagLen
                     1,     // theSkipFinal
                     plainText,
                     &plainTextLen);
    if (ret != 0)
    {
        return ret;
    }

    printChars(plainText,
               plainTextLen,
               "plainText:\n",
               0);
    printf("plainTextLen[%d]\n", plainTextLen);

    // 6.1) parse sni, alpn
    if (direction == DI_UPLINK)
    {
        unsigned char sni[4096];
        int sniLen;
        unsigned char alpn[4096];
        int alpnLen;

        if (quicVersionInfo->version == QV_Q050)
        {
            ret = parseFrameCrypto(plainText,
                                   plainTextLen,
                                   sni,
                                   &sniLen,
                                   alpn,
                                   &alpnLen);
        }
        else
        {
            ret = parseFrameTls1_3(plainText,
                                   plainTextLen,
                                   sni,
                                   &sniLen,
                                   alpn,
                                   &alpnLen);
        }

        if (ret != 0)
        {
            return ret;
        }

        printChars(sni,
                   sniLen,
                   "sni:\n",
                   0);
        printf("sniLen[%d]\n", sniLen);

        printChars(alpn,
                   alpnLen,
                   "apln:\n",
                   0);
        printf("alpnLen[%d]\n", alpnLen);
    }

    return 0;
}

int main(int argc, char *argv[])
{
    int index;
    if (argc > 1)
    {
        index = atoi(argv[1]);
    }
    if (index < 0 || index >= sizeof(packets) / sizeof(packets[0]))
    {
        index = 0;
    }

    Packet *packet = &packets[index];
    printf("parse %s\n", packet->desc);
    return parse(packet->buffer,
                 packet->bufferLen,
                 packet->direction);
}

