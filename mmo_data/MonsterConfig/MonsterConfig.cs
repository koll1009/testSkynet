// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: MonsterConfig
	
	public partial class MonsterConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// MonsterConfig
		/// </summary>
		public List<MonsterConfigDefine> Datas = new List<MonsterConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<string, MonsterConfigDefine> _ByID = new Dictionary<string, MonsterConfigDefine>();
        public MonsterConfigDefine GetByID(string ID, MonsterConfigDefine def = default(MonsterConfigDefine))
        {
            MonsterConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MonsterConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( MonsterConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<MonsterConfig> _MonsterConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<MonsterConfig> MonsterConfigDeserializeHandler
		{
			get
			{
				if (_MonsterConfigDeserializeHandler == null )
				{
					_MonsterConfigDeserializeHandler = new tabtoy.DeserializeHandler<MonsterConfig>(Deserialize);
				}

				return _MonsterConfigDeserializeHandler;
			}
		}
		public static void Deserialize( MonsterConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<MonsterConfigDefine>(MonsterConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build MonsterConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( MonsterConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<MonsterConfigDefine> _MonsterConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<MonsterConfigDefine> MonsterConfigDefineDeserializeHandler
		{
			get
			{
				if (_MonsterConfigDefineDeserializeHandler == null )
				{
					_MonsterConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<MonsterConfigDefine>(Deserialize);
				}

				return _MonsterConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( MonsterConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.ID = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Classify = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.AttackTypes = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Hp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Sp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Atk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Mgk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Def = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.Rgs = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.Cri = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.Gr = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.Csd = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.Hit = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.Rtd = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.Bel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.Cur = reader.ReadInt32();
                	}
                	break; 
                	case 0x10012:
                	{
						ins.Tou = reader.ReadInt32();
                	}
                	break; 
                	case 0x10013:
                	{
						ins.Hprq = reader.ReadInt32();
                	}
                	break; 
                	case 0x10014:
                	{
						ins.Sprq = reader.ReadInt32();
                	}
                	break; 
                	case 0x10015:
                	{
						ins.Wsp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10016:
                	{
						ins.Mov = reader.ReadInt32();
                	}
                	break; 
                	case 0x10017:
                	{
						ins.Gatk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10018:
                	{
						ins.Watk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10019:
                	{
						ins.Fatk = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001a:
                	{
						ins.Wdatk = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001b:
                	{
						ins.Grst = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001c:
                	{
						ins.Wrst = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001d:
                	{
						ins.Frst = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001e:
                	{
						ins.Wdrst = reader.ReadInt32();
                	}
                	break; 
                	case 0x6001f:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x60020:
                	{
						ins.ResourceId = reader.ReadString();
                	}
                	break; 
                	case 0x60021:
                	{
						ins.AnimId = reader.ReadString();
                	}
                	break; 
                	case 0x50022:
                	{
						ins.DieParameters = reader.ReadFloat();
                	}
                	break; 
                	case 0x10023:
                	{
						ins.DamageOverflow.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10024:
                	{
						ins.ActiveSkills.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10025:
                	{
						ins.PassiveSkills.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10026:
                	{
						ins.SkillLoop.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10027:
                	{
						ins.OrdinaryDrop = reader.ReadInt32();
                	}
                	break; 
                	case 0x10028:
                	{
						ins.SeniorDrop = reader.ReadInt32();
                	}
                	break; 
                	case 0x10029:
                	{
						ins.TaskDrop.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1002a:
                	{
						ins.KillCountShare = reader.ReadInt32();
                	}
                	break; 
                	case 0x1002b:
                	{
						ins.IdleTalk.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1002c:
                	{
						ins.BusyTalk.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x6002d:
                	{
						ins.AttackSound = reader.ReadString();
                	}
                	break; 
                	case 0x6002e:
                	{
						ins.ClickSound = reader.ReadString();
                	}
                	break; 
                	case 0x6002f:
                	{
						ins.Death = reader.ReadString();
                	}
                	break; 
                	case 0x10030:
                	{
						ins.Ai = reader.ReadInt32();
                	}
                	break; 
                	case 0x60031:
                	{
						ins.Profile = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: MonsterConfigDefine
	[System.Serializable]
	public partial class MonsterConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public string ID = ""; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 等级
		/// </summary>
		public int Level = 0; 
		
		/// <summary> 
		/// 分类
		///0：普通、1：精英、2：BOSS
		/// </summary>
		public int Classify = 0; 
		
		/// <summary> 
		/// 攻击类型
		///0：主动怪
		///1：被动怪
		///2：木桩怪
		/// </summary>
		public int AttackTypes = 0; 
		
		/// <summary> 
		/// 生命值
		/// </summary>
		public int Hp = 0; 
		
		/// <summary> 
		/// 能量值
		/// </summary>
		public int Sp = 0; 
		
		/// <summary> 
		/// 物攻
		/// </summary>
		public int Atk = 0; 
		
		/// <summary> 
		/// 魔攻
		/// </summary>
		public int Mgk = 0; 
		
		/// <summary> 
		/// 物防
		/// </summary>
		public int Def = 0; 
		
		/// <summary> 
		/// 魔防
		/// </summary>
		public int Rgs = 0; 
		
		/// <summary> 
		/// 暴击率
		/// </summary>
		public int Cri = 0; 
		
		/// <summary> 
		/// 抗暴率
		/// </summary>
		public int Gr = 0; 
		
		/// <summary> 
		/// 暴伤率
		/// </summary>
		public int Csd = 0; 
		
		/// <summary> 
		/// 直击率
		/// </summary>
		public int Hit = 0; 
		
		/// <summary> 
		/// 抗直率
		/// </summary>
		public int Rtd = 0; 
		
		/// <summary> 
		/// 信念
		/// </summary>
		public int Bel = 0; 
		
		/// <summary> 
		/// 治疗威力
		/// </summary>
		public int Cur = 0; 
		
		/// <summary> 
		/// 坚韧
		/// </summary>
		public int Tou = 0; 
		
		/// <summary> 
		/// HP恢复量
		/// </summary>
		public int Hprq = 0; 
		
		/// <summary> 
		/// SP恢复量
		/// </summary>
		public int Sprq = 0; 
		
		/// <summary> 
		/// 攻击频率
		/// </summary>
		public int Wsp = 0; 
		
		/// <summary> 
		/// 移动速度
		/// </summary>
		public int Mov = 0; 
		
		/// <summary> 
		/// 地攻
		/// </summary>
		public int Gatk = 0; 
		
		/// <summary> 
		/// 水攻
		/// </summary>
		public int Watk = 0; 
		
		/// <summary> 
		/// 火攻
		/// </summary>
		public int Fatk = 0; 
		
		/// <summary> 
		/// 风攻
		/// </summary>
		public int Wdatk = 0; 
		
		/// <summary> 
		/// 地抗
		/// </summary>
		public int Grst = 0; 
		
		/// <summary> 
		/// 水抗
		/// </summary>
		public int Wrst = 0; 
		
		/// <summary> 
		/// 火抗
		/// </summary>
		public int Frst = 0; 
		
		/// <summary> 
		/// 风抗
		/// </summary>
		public int Wdrst = 0; 
		
		/// <summary> 
		/// 头像ID
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 怪物资源ID
		/// </summary>
		public string ResourceId = ""; 
		
		/// <summary> 
		/// 动作组ID
		///基础动作|技能动作
		///填动作表ID
		/// </summary>
		public string AnimId = ""; 
		
		/// <summary> 
		/// 死亡参数：尸体停留时间
		///（秒）
		/// </summary>
		public float DieParameters = 0f; 
		
		/// <summary> 
		/// 伤害溢出
		///为空时，表示无伤害溢出
		///第一个值为存在时间
		///第二个值为伤害溢出量
		/// </summary>
		public List<int> DamageOverflow = new List<int>(); 
		
		/// <summary> 
		/// 主动技能
		/// </summary>
		public List<int> ActiveSkills = new List<int>(); 
		
		/// <summary> 
		/// 被动技能
		/// </summary>
		public List<int> PassiveSkills = new List<int>(); 
		
		/// <summary> 
		/// 技能循环
		///跟进列表顺序循环使用技能
		///(不能填0）
		/// </summary>
		public List<int> SkillLoop = new List<int>(); 
		
		/// <summary> 
		/// 普通掉落
		///掉落物品库ID
		/// </summary>
		public int OrdinaryDrop = 0; 
		
		/// <summary> 
		/// 高级掉落
		///掉落物品库ID
		/// </summary>
		public int SeniorDrop = 0; 
		
		/// <summary> 
		/// 任务掉落
		///任务ID>掉落物品库ID
		/// </summary>
		public List<int> TaskDrop = new List<int>(); 
		
		/// <summary> 
		/// 击杀数量共享
		///0 否
		///1 是
		/// </summary>
		public int KillCountShare = 0; 
		
		/// <summary> 
		/// 闲时发言
		///填对话表ID
		///发言|时间间隔
		/// </summary>
		public List<int> IdleTalk = new List<int>(); 
		
		/// <summary> 
		/// 受到攻击发言
		///填对话表ID
		///发言|时间间隔
		/// </summary>
		public List<int> BusyTalk = new List<int>(); 
		
		/// <summary> 
		/// 攻击时播放音效
		/// </summary>
		public string AttackSound = ""; 
		
		/// <summary> 
		/// 受击时播放音效
		/// </summary>
		public string ClickSound = ""; 
		
		/// <summary> 
		/// 死亡时播放音效
		/// </summary>
		public string Death = ""; 
		
		/// <summary> 
		/// AI编号
		///0为通用ID
		///填编号表示引用怪物AI表的AI
		/// </summary>
		public int Ai = 0; 
		
		/// <summary> 
		/// 怪物介绍
		/// </summary>
		public string Profile = ""; 
	
	

	} 

}
