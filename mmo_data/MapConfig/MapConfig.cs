// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: MapConfig
	
	public partial class MapConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// MapConfig
		/// </summary>
		public List<MapConfigDefine> Datas = new List<MapConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, MapConfigDefine> _ByID = new Dictionary<int, MapConfigDefine>();
        public MapConfigDefine GetByID(int ID, MapConfigDefine def = default(MapConfigDefine))
        {
            MapConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MapConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( MapConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<MapConfig> _MapConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<MapConfig> MapConfigDeserializeHandler
		{
			get
			{
				if (_MapConfigDeserializeHandler == null )
				{
					_MapConfigDeserializeHandler = new tabtoy.DeserializeHandler<MapConfig>(Deserialize);
				}

				return _MapConfigDeserializeHandler;
			}
		}
		public static void Deserialize( MapConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<MapConfigDefine>(MapConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build MapConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( MapConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<MapConfigDefine> _MapConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<MapConfigDefine> MapConfigDefineDeserializeHandler
		{
			get
			{
				if (_MapConfigDefineDeserializeHandler == null )
				{
					_MapConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<MapConfigDefine>(Deserialize);
				}

				return _MapConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( MapConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Path = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.BuilderName = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Loading.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: MapConfigDefine
	[System.Serializable]
	public partial class MapConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 场景名
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 路径
		/// </summary>
		public string Path = ""; 
		
		/// <summary> 
		/// builder名字
		/// </summary>
		public string BuilderName = ""; 
		
		/// <summary> 
		/// loading时候显示的[effectId,bgName,desc]
		/// </summary>
		public List<string> Loading = new List<string>(); 
	
	

	} 

}
