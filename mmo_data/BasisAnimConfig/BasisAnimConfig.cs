// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: BasisAnimConfig
	
	public partial class BasisAnimConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// BasisAnimConfig
		/// </summary>
		public List<BasisAnimConfigDefine> Datas = new List<BasisAnimConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, BasisAnimConfigDefine> _ByID = new Dictionary<int, BasisAnimConfigDefine>();
        public BasisAnimConfigDefine GetByID(int ID, BasisAnimConfigDefine def = default(BasisAnimConfigDefine))
        {
            BasisAnimConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(BasisAnimConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( BasisAnimConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<BasisAnimConfig> _BasisAnimConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<BasisAnimConfig> BasisAnimConfigDeserializeHandler
		{
			get
			{
				if (_BasisAnimConfigDeserializeHandler == null )
				{
					_BasisAnimConfigDeserializeHandler = new tabtoy.DeserializeHandler<BasisAnimConfig>(Deserialize);
				}

				return _BasisAnimConfigDeserializeHandler;
			}
		}
		public static void Deserialize( BasisAnimConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<BasisAnimConfigDefine>(BasisAnimConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build BasisAnimConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( BasisAnimConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<BasisAnimConfigDefine> _BasisAnimConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<BasisAnimConfigDefine> BasisAnimConfigDefineDeserializeHandler
		{
			get
			{
				if (_BasisAnimConfigDefineDeserializeHandler == null )
				{
					_BasisAnimConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<BasisAnimConfigDefine>(Deserialize);
				}

				return _BasisAnimConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( BasisAnimConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Ctrl = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Idle = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Run = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.BattleBefore = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.BattleIdle = reader.ReadString();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.BattleAfter = reader.ReadString();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.BattleRun = reader.ReadString();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.SpecialIdle = reader.ReadString();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.SpecialRun = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.Hurt = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.Repel = reader.ReadString();
                	}
                	break; 
                	case 0x6000d:
                	{
						ins.Roll = reader.ReadString();
                	}
                	break; 
                	case 0x6000e:
                	{
						ins.Dead = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: BasisAnimConfigDefine
	[System.Serializable]
	public partial class BasisAnimConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 基础动作类
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 动作组编号
		///引用情况
		///职业表：动作组ID
		///怪物表：动作组ID
		/// </summary>
		public string Ctrl = ""; 
		
		/// <summary> 
		/// 休闲待机
		/// </summary>
		public string Idle = ""; 
		
		/// <summary> 
		/// 休闲移动
		/// </summary>
		public string Run = ""; 
		
		/// <summary> 
		/// 战斗前摇
		/// </summary>
		public string BattleBefore = ""; 
		
		/// <summary> 
		/// 战斗待机
		/// </summary>
		public string BattleIdle = ""; 
		
		/// <summary> 
		/// 战斗后摇
		/// </summary>
		public string BattleAfter = ""; 
		
		/// <summary> 
		/// 战斗移动
		/// </summary>
		public string BattleRun = ""; 
		
		/// <summary> 
		/// 特殊待机
		/// </summary>
		public string SpecialIdle = ""; 
		
		/// <summary> 
		/// 特殊移动
		/// </summary>
		public string SpecialRun = ""; 
		
		/// <summary> 
		/// 受击
		/// </summary>
		public string Hurt = ""; 
		
		/// <summary> 
		/// 击退
		/// </summary>
		public string Repel = ""; 
		
		/// <summary> 
		/// 闪避
		/// </summary>
		public string Roll = ""; 
		
		/// <summary> 
		/// 死亡
		/// </summary>
		public string Dead = ""; 
	
	

	} 

}
