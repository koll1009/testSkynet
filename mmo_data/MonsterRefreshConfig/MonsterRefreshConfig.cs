// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: MonsterRefreshConfig
	
	public partial class MonsterRefreshConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// MonsterRefreshConfig
		/// </summary>
		public List<MonsterRefreshConfigDefine> Datas = new List<MonsterRefreshConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<string, MonsterRefreshConfigDefine> _ByID = new Dictionary<string, MonsterRefreshConfigDefine>();
        public MonsterRefreshConfigDefine GetByID(string ID, MonsterRefreshConfigDefine def = default(MonsterRefreshConfigDefine))
        {
            MonsterRefreshConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MonsterRefreshConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( MonsterRefreshConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<MonsterRefreshConfig> _MonsterRefreshConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<MonsterRefreshConfig> MonsterRefreshConfigDeserializeHandler
		{
			get
			{
				if (_MonsterRefreshConfigDeserializeHandler == null )
				{
					_MonsterRefreshConfigDeserializeHandler = new tabtoy.DeserializeHandler<MonsterRefreshConfig>(Deserialize);
				}

				return _MonsterRefreshConfigDeserializeHandler;
			}
		}
		public static void Deserialize( MonsterRefreshConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<MonsterRefreshConfigDefine>(MonsterRefreshConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build MonsterRefreshConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( MonsterRefreshConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<MonsterRefreshConfigDefine> _MonsterRefreshConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<MonsterRefreshConfigDefine> MonsterRefreshConfigDefineDeserializeHandler
		{
			get
			{
				if (_MonsterRefreshConfigDefineDeserializeHandler == null )
				{
					_MonsterRefreshConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<MonsterRefreshConfigDefine>(Deserialize);
				}

				return _MonsterRefreshConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( MonsterRefreshConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.ID = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.MonsterId = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.MapLocation = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.TriggerCondition = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.ConditionParameters = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.BurshNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.TriggerNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Rebirth = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.RebirthTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.EffectiveExtension = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.ThereTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.Attribution = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.Radio = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: MonsterRefreshConfigDefine
	[System.Serializable]
	public partial class MonsterRefreshConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public string ID = ""; 
		
		/// <summary> 
		/// 怪物ID
		///填怪物表ID
		/// </summary>
		public string MonsterId = ""; 
		
		/// <summary> 
		/// 场景定位
		///填场景定位ID
		/// </summary>
		public int MapLocation = 0; 
		
		/// <summary> 
		/// 触发条件
		///0 无条件
		///1 父级刷新器
		///2 任务触发
		///3 道具触发
		/// </summary>
		public int TriggerCondition = 0; 
		
		/// <summary> 
		/// 条件参数
		///0 无
		///1 父级刷新器编号
		///2 任务ID
		///3 道具ID
		/// </summary>
		public int ConditionParameters = 0; 
		
		/// <summary> 
		/// 刷怪数量
		/// </summary>
		public int BurshNumber = 0; 
		
		/// <summary> 
		/// 触发数量
		/// </summary>
		public int TriggerNumber = 0; 
		
		/// <summary> 
		/// 重生
		///0 否
		///1 是
		/// </summary>
		public int Rebirth = 0; 
		
		/// <summary> 
		/// 重生时间（秒）
		/// </summary>
		public int RebirthTime = 0; 
		
		/// <summary> 
		/// 生效延长
		/// </summary>
		public int EffectiveExtension = 0; 
		
		/// <summary> 
		/// 存在时间
		///0 不消失
		/// </summary>
		public int ThereTime = 0; 
		
		/// <summary> 
		/// 生成归属
		///0 全服
		///1 个人
		///2 队伍
		///3 佣兵团
		/// </summary>
		public int Attribution = 0; 
		
		/// <summary> 
		/// 生成广播
		///填广播表ID
		/// </summary>
		public int Radio = 0; 
	
	

	} 

}
