// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: InitialInformationConfig
	
	public partial class InitialInformationConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// InitialInformationConfig
		/// </summary>
		public List<InitialInformationConfigDefine> Datas = new List<InitialInformationConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<string, InitialInformationConfigDefine> _ByID = new Dictionary<string, InitialInformationConfigDefine>();
        public InitialInformationConfigDefine GetByID(string ID, InitialInformationConfigDefine def = default(InitialInformationConfigDefine))
        {
            InitialInformationConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(InitialInformationConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( InitialInformationConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<InitialInformationConfig> _InitialInformationConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<InitialInformationConfig> InitialInformationConfigDeserializeHandler
		{
			get
			{
				if (_InitialInformationConfigDeserializeHandler == null )
				{
					_InitialInformationConfigDeserializeHandler = new tabtoy.DeserializeHandler<InitialInformationConfig>(Deserialize);
				}

				return _InitialInformationConfigDeserializeHandler;
			}
		}
		public static void Deserialize( InitialInformationConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<InitialInformationConfigDefine>(InitialInformationConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build InitialInformationConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( InitialInformationConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<InitialInformationConfigDefine> _InitialInformationConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<InitialInformationConfigDefine> InitialInformationConfigDefineDeserializeHandler
		{
			get
			{
				if (_InitialInformationConfigDefineDeserializeHandler == null )
				{
					_InitialInformationConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<InitialInformationConfigDefine>(Deserialize);
				}

				return _InitialInformationConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( InitialInformationConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.ID = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Model = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Sex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.Exp = reader.ReadFloat();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Gold = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Diamond = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.GoldBond = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.BagContent = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.DepotContent = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.BaseStr = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.BaseDex = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.BaseCon = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.BaseInt = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.BaseSpi = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.BaseHp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.BaseSp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10012:
                	{
						ins.BaseAtk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10013:
                	{
						ins.BaseMgk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10014:
                	{
						ins.BaseDef = reader.ReadInt32();
                	}
                	break; 
                	case 0x10015:
                	{
						ins.BaseRgs = reader.ReadInt32();
                	}
                	break; 
                	case 0x10016:
                	{
						ins.BaseCri = reader.ReadInt32();
                	}
                	break; 
                	case 0x10017:
                	{
						ins.BaseGr = reader.ReadInt32();
                	}
                	break; 
                	case 0x10018:
                	{
						ins.BaseCsd = reader.ReadInt32();
                	}
                	break; 
                	case 0x10019:
                	{
						ins.BaseHit = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001a:
                	{
						ins.BaseRtd = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001b:
                	{
						ins.BaseBel = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001c:
                	{
						ins.BaseCur = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001d:
                	{
						ins.BaseTou = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001e:
                	{
						ins.BaseHprq = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001f:
                	{
						ins.BaseSprq = reader.ReadInt32();
                	}
                	break; 
                	case 0x10020:
                	{
						ins.BaseWsp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10021:
                	{
						ins.BaseCs = reader.ReadInt32();
                	}
                	break; 
                	case 0x10022:
                	{
						ins.BaseMov = reader.ReadInt32();
                	}
                	break; 
                	case 0x10023:
                	{
						ins.BaseGatk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10024:
                	{
						ins.BaseWatk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10025:
                	{
						ins.BaseFatk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10026:
                	{
						ins.BaseWdatk = reader.ReadInt32();
                	}
                	break; 
                	case 0x10027:
                	{
						ins.BaseGrst = reader.ReadInt32();
                	}
                	break; 
                	case 0x10028:
                	{
						ins.BaseWrst = reader.ReadInt32();
                	}
                	break; 
                	case 0x10029:
                	{
						ins.BaseFrst = reader.ReadInt32();
                	}
                	break; 
                	case 0x1002a:
                	{
						ins.BaseWdrst = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: InitialInformationConfigDefine
	[System.Serializable]
	public partial class InitialInformationConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public string ID = ""; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 初始外型
		/// </summary>
		public string Model = ""; 
		
		/// <summary> 
		/// 性别
		/// </summary>
		public int Sex = 0; 
		
		/// <summary> 
		/// 等级
		/// </summary>
		public int Level = 0; 
		
		/// <summary> 
		/// 经验值
		/// </summary>
		public float Exp = 0f; 
		
		/// <summary> 
		/// 金币
		/// </summary>
		public int Gold = 0; 
		
		/// <summary> 
		/// 钻石
		/// </summary>
		public int Diamond = 0; 
		
		/// <summary> 
		/// 金券
		/// </summary>
		public int GoldBond = 0; 
		
		/// <summary> 
		/// 背包格
		/// </summary>
		public int BagContent = 0; 
		
		/// <summary> 
		/// 仓库格
		/// </summary>
		public int DepotContent = 0; 
		
		/// <summary> 
		/// 初始力量
		/// </summary>
		public int BaseStr = 0; 
		
		/// <summary> 
		/// 初始敏捷
		/// </summary>
		public int BaseDex = 0; 
		
		/// <summary> 
		/// 初始体力
		/// </summary>
		public int BaseCon = 0; 
		
		/// <summary> 
		/// 初始智力
		/// </summary>
		public int BaseInt = 0; 
		
		/// <summary> 
		/// 初始精神
		/// </summary>
		public int BaseSpi = 0; 
		
		/// <summary> 
		/// 初始生命值
		/// </summary>
		public int BaseHp = 0; 
		
		/// <summary> 
		/// 初始能量值
		/// </summary>
		public int BaseSp = 0; 
		
		/// <summary> 
		/// 初始物攻
		/// </summary>
		public int BaseAtk = 0; 
		
		/// <summary> 
		/// 初始魔攻
		/// </summary>
		public int BaseMgk = 0; 
		
		/// <summary> 
		/// 初始物防
		/// </summary>
		public int BaseDef = 0; 
		
		/// <summary> 
		/// 初始魔防
		/// </summary>
		public int BaseRgs = 0; 
		
		/// <summary> 
		/// 初始暴击率
		/// </summary>
		public int BaseCri = 0; 
		
		/// <summary> 
		/// 初始抗暴率
		/// </summary>
		public int BaseGr = 0; 
		
		/// <summary> 
		/// 初始暴伤率
		/// </summary>
		public int BaseCsd = 0; 
		
		/// <summary> 
		/// 初始直击率
		/// </summary>
		public int BaseHit = 0; 
		
		/// <summary> 
		/// 初始抗直率
		/// </summary>
		public int BaseRtd = 0; 
		
		/// <summary> 
		/// 初始信念
		/// </summary>
		public int BaseBel = 0; 
		
		/// <summary> 
		/// 初始治疗威力
		/// </summary>
		public int BaseCur = 0; 
		
		/// <summary> 
		/// 初始坚韧
		/// </summary>
		public int BaseTou = 0; 
		
		/// <summary> 
		/// 初始HP恢复量
		/// </summary>
		public int BaseHprq = 0; 
		
		/// <summary> 
		/// 初始SP恢复量
		/// </summary>
		public int BaseSprq = 0; 
		
		/// <summary> 
		/// 初始攻击速度
		/// </summary>
		public int BaseWsp = 0; 
		
		/// <summary> 
		/// 初始施放速度
		/// </summary>
		public int BaseCs = 0; 
		
		/// <summary> 
		/// 初始移动速度
		/// </summary>
		public int BaseMov = 0; 
		
		/// <summary> 
		/// 初始地属性攻击
		/// </summary>
		public int BaseGatk = 0; 
		
		/// <summary> 
		/// 初始水属性攻击
		/// </summary>
		public int BaseWatk = 0; 
		
		/// <summary> 
		/// 初始火属性攻击
		/// </summary>
		public int BaseFatk = 0; 
		
		/// <summary> 
		/// 初始风属性攻击
		/// </summary>
		public int BaseWdatk = 0; 
		
		/// <summary> 
		/// 初始地属性抗性
		/// </summary>
		public int BaseGrst = 0; 
		
		/// <summary> 
		/// 初始水属性抗性
		/// </summary>
		public int BaseWrst = 0; 
		
		/// <summary> 
		/// 初始火属性抗性
		/// </summary>
		public int BaseFrst = 0; 
		
		/// <summary> 
		/// 初始风属性抗性
		/// </summary>
		public int BaseWdrst = 0; 
	
	

	} 

}
