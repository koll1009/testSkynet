// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: SkillConfig
	
	public partial class SkillConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// SkillConfig
		/// </summary>
		public List<SkillConfigDefine> Datas = new List<SkillConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, SkillConfigDefine> _ByID = new Dictionary<int, SkillConfigDefine>();
        public SkillConfigDefine GetByID(int ID, SkillConfigDefine def = default(SkillConfigDefine))
        {
            SkillConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SkillConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( SkillConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<SkillConfig> _SkillConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillConfig> SkillConfigDeserializeHandler
		{
			get
			{
				if (_SkillConfigDeserializeHandler == null )
				{
					_SkillConfigDeserializeHandler = new tabtoy.DeserializeHandler<SkillConfig>(Deserialize);
				}

				return _SkillConfigDeserializeHandler;
			}
		}
		public static void Deserialize( SkillConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<SkillConfigDefine>(SkillConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build SkillConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( SkillConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<SkillConfigDefine> _SkillConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillConfigDefine> SkillConfigDefineDeserializeHandler
		{
			get
			{
				if (_SkillConfigDefineDeserializeHandler == null )
				{
					_SkillConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillConfigDefine>(Deserialize);
				}

				return _SkillConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SkillConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Description = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Remark = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Profession = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.SkillType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.ReleaseType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.TriggerType = reader.ReadInt32();
                	}
                	break; 
                	case 0x50009:
                	{
						ins.TriggerProbability = reader.ReadFloat();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.TriggerPreID = reader.ReadInt32();
                	}
                	break; 
                	case 0x5000b:
                	{
						ins.ReleaseDistance = reader.ReadFloat();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.Target = reader.ReadInt32();
                	}
                	break; 
                	case 0x5000d:
                	{
						ins.SpellTime = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000e:
                	{
						ins.LastingTime = reader.ReadFloat();
                	}
                	break; 
                	case 0x7000f:
                	{
						ins.CanMove = reader.ReadBool();
                	}
                	break; 
                	case 0x50010:
                	{
						ins.CD = reader.ReadFloat();
                	}
                	break; 
                	case 0x50011:
                	{
						ins.GCD = reader.ReadFloat();
                	}
                	break; 
                	case 0x60012:
                	{
						ins.SkillsConsumption = reader.ReadString();
                	}
                	break; 
                	case 0x60013:
                	{
						ins.ActionID = reader.ReadString();
                	}
                	break; 
                	case 0x50014:
                	{
						ins.DisplacementSpeed = reader.ReadFloat();
                	}
                	break; 
                	case 0x50015:
                	{
						ins.FlyingSpeed = reader.ReadFloat();
                	}
                	break; 
                	case 0x60016:
                	{
						ins.ReadySE = reader.ReadString();
                	}
                	break; 
                	case 0x60017:
                	{
						ins.ReleaseSE = reader.ReadString();
                	}
                	break; 
                	case 0x60018:
                	{
						ins.HitSE = reader.ReadString();
                	}
                	break; 
                	case 0x10019:
                	{
						ins.DamageType = reader.ReadInt32();
                	}
                	break; 
                	case 0x5001a:
                	{
						ins.Damage = reader.ReadFloat();
                	}
                	break; 
                	case 0x5001b:
                	{
						ins.AdditionDamage = reader.ReadFloat();
                	}
                	break; 
                	case 0x5001c:
                	{
						ins.ThreatRatio = reader.ReadFloat();
                	}
                	break; 
                	case 0x1001d:
                	{
						ins.PointType = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001e:
                	{
						ins.Scope = reader.ReadInt32();
                	}
                	break; 
                	case 0x5001f:
                	{
						ins.Length = reader.ReadFloat();
                	}
                	break; 
                	case 0x50020:
                	{
						ins.Width = reader.ReadFloat();
                	}
                	break; 
                	case 0x50021:
                	{
						ins.Radius = reader.ReadFloat();
                	}
                	break; 
                	case 0x50022:
                	{
						ins.CentralAngle = reader.ReadFloat();
                	}
                	break; 
                	case 0x70023:
                	{
						ins.FlownAfterKill = reader.ReadBool();
                	}
                	break; 
                	case 0x70024:
                	{
						ins.ShockAfterKill = reader.ReadBool();
                	}
                	break; 
                	case 0x60025:
                	{
						ins.Event.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: SkillConfigDefine
	[System.Serializable]
	public partial class SkillConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 技能名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 技能图标
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 技能描述
		/// </summary>
		public string Description = ""; 
		
		/// <summary> 
		/// 技能备注
		/// </summary>
		public string Remark = ""; 
		
		/// <summary> 
		/// 职业
		/// </summary>
		public int Profession = 0; 
		
		/// <summary> 
		/// 技能类型
		/// </summary>
		public int SkillType = 0; 
		
		/// <summary> 
		/// 技能释放类型
		/// </summary>
		public int ReleaseType = 0; 
		
		/// <summary> 
		/// 触发类型
		/// </summary>
		public int TriggerType = 0; 
		
		/// <summary> 
		/// 触发几率
		/// </summary>
		public float TriggerProbability = 0f; 
		
		/// <summary> 
		/// 触发前置ID
		/// </summary>
		public int TriggerPreID = 0; 
		
		/// <summary> 
		/// 施法距离
		/// </summary>
		public float ReleaseDistance = 0f; 
		
		/// <summary> 
		/// 作用对象
		/// </summary>
		public int Target = 0; 
		
		/// <summary> 
		/// 吟唱时间
		/// </summary>
		public float SpellTime = 0f; 
		
		/// <summary> 
		/// 持续释放时间
		/// </summary>
		public float LastingTime = 0f; 
		
		/// <summary> 
		/// 持续施法可移动
		/// </summary>
		public bool CanMove = false; 
		
		/// <summary> 
		/// 冷却时间
		///（秒）
		/// </summary>
		public float CD = 0f; 
		
		/// <summary> 
		/// 公共冷却时间
		///（秒）
		/// </summary>
		public float GCD = 0f; 
		
		/// <summary> 
		/// 技能消耗
		///消耗类型，数值类型，数值
		/// </summary>
		public string SkillsConsumption = ""; 
		
		/// <summary> 
		/// 动作编号
		/// </summary>
		public string ActionID = ""; 
		
		/// <summary> 
		/// 位移速度
		/// </summary>
		public float DisplacementSpeed = 0f; 
		
		/// <summary> 
		/// 投掷物飞行速度
		/// </summary>
		public float FlyingSpeed = 0f; 
		
		/// <summary> 
		/// 预备音效
		/// </summary>
		public string ReadySE = ""; 
		
		/// <summary> 
		/// 施法音效
		/// </summary>
		public string ReleaseSE = ""; 
		
		/// <summary> 
		/// 击中音效
		/// </summary>
		public string HitSE = ""; 
		
		/// <summary> 
		/// 伤害类型
		/// </summary>
		public int DamageType = 0; 
		
		/// <summary> 
		/// 技能威力
		/// </summary>
		public float Damage = 0f; 
		
		/// <summary> 
		/// 技能附加伤害
		/// </summary>
		public float AdditionDamage = 0f; 
		
		/// <summary> 
		/// 仇恨系数
		/// </summary>
		public float ThreatRatio = 0f; 
		
		/// <summary> 
		/// 指向类型
		/// </summary>
		public int PointType = 0; 
		
		/// <summary> 
		/// 伤害范围类型
		///0 单体
		///1 矩形
		///2 扇形
		/// </summary>
		public int Scope = 0; 
		
		/// <summary> 
		/// 长（米）
		/// </summary>
		public float Length = 0f; 
		
		/// <summary> 
		/// 宽（米）
		/// </summary>
		public float Width = 0f; 
		
		/// <summary> 
		/// 半径（米）
		/// </summary>
		public float Radius = 0f; 
		
		/// <summary> 
		/// 圆心角（度）
		/// </summary>
		public float CentralAngle = 0f; 
		
		/// <summary> 
		/// 击杀时候击飞
		/// </summary>
		public bool FlownAfterKill = false; 
		
		/// <summary> 
		/// 击杀是否震屏
		/// </summary>
		public bool ShockAfterKill = false; 
		
		/// <summary> 
		/// 事件
		///事件，自己BUFF，队友BUFF，敌人BUFF|事件，自己BUFF，队友BUFF，敌人BUFF
		/// </summary>
		public List<string> Event = new List<string>(); 
	
	

	} 

}
