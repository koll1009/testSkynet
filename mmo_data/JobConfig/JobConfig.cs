// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: JobConfig
	
	public partial class JobConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// JobConfig
		/// </summary>
		public List<JobConfigDefine> Datas = new List<JobConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<string, JobConfigDefine> _ByID = new Dictionary<string, JobConfigDefine>();
        public JobConfigDefine GetByID(string ID, JobConfigDefine def = default(JobConfigDefine))
        {
            JobConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(JobConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( JobConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<JobConfig> _JobConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<JobConfig> JobConfigDeserializeHandler
		{
			get
			{
				if (_JobConfigDeserializeHandler == null )
				{
					_JobConfigDeserializeHandler = new tabtoy.DeserializeHandler<JobConfig>(Deserialize);
				}

				return _JobConfigDeserializeHandler;
			}
		}
		public static void Deserialize( JobConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<JobConfigDefine>(JobConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build JobConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( JobConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<JobConfigDefine> _JobConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<JobConfigDefine> JobConfigDefineDeserializeHandler
		{
			get
			{
				if (_JobConfigDefineDeserializeHandler == null )
				{
					_JobConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<JobConfigDefine>(Deserialize);
				}

				return _JobConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( JobConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.ID = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Professional = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.ProfessionalAction = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.ProfessionalSkills.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: JobConfigDefine
	[System.Serializable]
	public partial class JobConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public string ID = ""; 
		
		/// <summary> 
		/// 职业
		/// </summary>
		public string Professional = ""; 
		
		/// <summary> 
		/// 职业动作组
		/// </summary>
		public string ProfessionalAction = ""; 
		
		/// <summary> 
		/// 职业技能
		/// </summary>
		public List<int> ProfessionalSkills = new List<int>(); 
	
	

	} 

}
