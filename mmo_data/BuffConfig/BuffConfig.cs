// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: BuffConfig
	
	public partial class BuffConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// BuffConfig
		/// </summary>
		public List<BuffConfigDefine> Datas = new List<BuffConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, BuffConfigDefine> _ByID = new Dictionary<int, BuffConfigDefine>();
        public BuffConfigDefine GetByID(int ID, BuffConfigDefine def = default(BuffConfigDefine))
        {
            BuffConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(BuffConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( BuffConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<BuffConfig> _BuffConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<BuffConfig> BuffConfigDeserializeHandler
		{
			get
			{
				if (_BuffConfigDeserializeHandler == null )
				{
					_BuffConfigDeserializeHandler = new tabtoy.DeserializeHandler<BuffConfig>(Deserialize);
				}

				return _BuffConfigDeserializeHandler;
			}
		}
		public static void Deserialize( BuffConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<BuffConfigDefine>(BuffConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build BuffConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( BuffConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<BuffConfigDefine> _BuffConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<BuffConfigDefine> BuffConfigDefineDeserializeHandler
		{
			get
			{
				if (_BuffConfigDefineDeserializeHandler == null )
				{
					_BuffConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<BuffConfigDefine>(Deserialize);
				}

				return _BuffConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( BuffConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Effect = reader.ReadString();
                	}
                	break; 
                	case 0x70004:
                	{
						ins.ShowIcon = reader.ReadBool();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.IconPriority = reader.ReadInt32();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.Description = reader.ReadString();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Target = reader.ReadInt32();
                	}
                	break; 
                	case 0x70008:
                	{
						ins.Clear = reader.ReadBool();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.BroadcastType = reader.ReadString();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.BuffType = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.EffectGroup = reader.ReadString();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.Priority = reader.ReadInt32();
                	}
                	break; 
                	case 0x7000d:
                	{
						ins.Superposition = reader.ReadBool();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.SuperpositionLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x5000f:
                	{
						ins.ExistTime = reader.ReadFloat();
                	}
                	break; 
                	case 0x50010:
                	{
						ins.EffectiveInterval = reader.ReadFloat();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.EffectType = reader.ReadInt32();
                	}
                	break; 
                	case 0x50012:
                	{
						ins.EffectTypeNum = reader.ReadFloat();
                	}
                	break; 
                	case 0x50013:
                	{
						ins.EffectTypePer = reader.ReadFloat();
                	}
                	break; 
                	case 0x60014:
                	{
						ins.Event.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x60015:
                	{
						ins.Property.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: BuffConfigDefine
	[System.Serializable]
	public partial class BuffConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// Buff名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// Buff图标
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// Buff特效
		/// </summary>
		public string Effect = ""; 
		
		/// <summary> 
		/// 图标显示
		/// </summary>
		public bool ShowIcon = false; 
		
		/// <summary> 
		/// 图标显示优先级
		/// </summary>
		public int IconPriority = 0; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Description = ""; 
		
		/// <summary> 
		/// 作用目标
		/// </summary>
		public int Target = 0; 
		
		/// <summary> 
		/// 清除
		/// </summary>
		public bool Clear = false; 
		
		/// <summary> 
		/// 广播类型
		/// </summary>
		public string BroadcastType = ""; 
		
		/// <summary> 
		/// 损益类型
		/// </summary>
		public string BuffType = ""; 
		
		/// <summary> 
		/// 效果分组
		/// </summary>
		public string EffectGroup = ""; 
		
		/// <summary> 
		/// 优先级
		/// </summary>
		public int Priority = 0; 
		
		/// <summary> 
		/// Buff ID相同时作用方式
		/// </summary>
		public bool Superposition = false; 
		
		/// <summary> 
		/// 层数上限
		/// </summary>
		public int SuperpositionLimit = 0; 
		
		/// <summary> 
		/// 存在时间
		/// </summary>
		public float ExistTime = 0f; 
		
		/// <summary> 
		/// 生效间隔时间
		/// </summary>
		public float EffectiveInterval = 0f; 
		
		/// <summary> 
		/// 效果类型
		/// </summary>
		public int EffectType = 0; 
		
		/// <summary> 
		/// 效果类型加成数值
		/// </summary>
		public float EffectTypeNum = 0f; 
		
		/// <summary> 
		/// 效果类型加成比例
		/// </summary>
		public float EffectTypePer = 0f; 
		
		/// <summary> 
		/// 事件
		/// </summary>
		public List<string> Event = new List<string>(); 
		
		/// <summary> 
		/// 属性
		/// </summary>
		public List<string> Property = new List<string>(); 
	
	

	} 

}
