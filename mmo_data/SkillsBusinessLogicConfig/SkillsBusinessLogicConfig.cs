// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: SkillsBusinessLogicConfig
	
	public partial class SkillsBusinessLogicConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// SkillsBusinessLogicConfig
		/// </summary>
		public List<SkillsBusinessLogicConfigDefine> Datas = new List<SkillsBusinessLogicConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, SkillsBusinessLogicConfigDefine> _ByID = new Dictionary<int, SkillsBusinessLogicConfigDefine>();
        public SkillsBusinessLogicConfigDefine GetByID(int ID, SkillsBusinessLogicConfigDefine def = default(SkillsBusinessLogicConfigDefine))
        {
            SkillsBusinessLogicConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SkillsBusinessLogicConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( SkillsBusinessLogicConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<SkillsBusinessLogicConfig> _SkillsBusinessLogicConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillsBusinessLogicConfig> SkillsBusinessLogicConfigDeserializeHandler
		{
			get
			{
				if (_SkillsBusinessLogicConfigDeserializeHandler == null )
				{
					_SkillsBusinessLogicConfigDeserializeHandler = new tabtoy.DeserializeHandler<SkillsBusinessLogicConfig>(Deserialize);
				}

				return _SkillsBusinessLogicConfigDeserializeHandler;
			}
		}
		public static void Deserialize( SkillsBusinessLogicConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<SkillsBusinessLogicConfigDefine>(SkillsBusinessLogicConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build SkillsBusinessLogicConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( SkillsBusinessLogicConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<SkillsBusinessLogicConfigDefine> _SkillsBusinessLogicConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillsBusinessLogicConfigDefine> SkillsBusinessLogicConfigDefineDeserializeHandler
		{
			get
			{
				if (_SkillsBusinessLogicConfigDefineDeserializeHandler == null )
				{
					_SkillsBusinessLogicConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillsBusinessLogicConfigDefine>(Deserialize);
				}

				return _SkillsBusinessLogicConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SkillsBusinessLogicConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ProfessionalLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.LevelLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.SkillsType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.SkillsShowType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Precondition = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Condition = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.GoldConsume = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.PropsConsume = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.SkillsId = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: SkillsBusinessLogicConfigDefine
	[System.Serializable]
	public partial class SkillsBusinessLogicConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 职业限制（条件一）
		///0 全职业
		///1 狂剑士
		///2 神射手
		///3 守护者
		///4 魔导师
		///5 圣职者
		/// </summary>
		public int ProfessionalLimit = 0; 
		
		/// <summary> 
		/// 职业等级限制（条件二）
		/// </summary>
		public int LevelLimit = 0; 
		
		/// <summary> 
		/// 技能类型
		///1 普通技能
		///2 翻滚技能
		///3 怒气技能
		/// </summary>
		public int SkillsType = 0; 
		
		/// <summary> 
		/// 技能显示类型
		///0 战技
		///1 怒技
		///2 魔法
		///3 闪技
		/// </summary>
		public int SkillsShowType = 0; 
		
		/// <summary> 
		/// 技能等级
		/// </summary>
		public int Level = 0; 
		
		/// <summary> 
		/// 学习条件（条件三）
		///0 无需判断
		///1 技能开启
		///2 任务开启
		///3 道具开启
		/// </summary>
		public int Precondition = 0; 
		
		/// <summary> 
		/// 学习条件附加值
		///1 技能ID
		///2 任务ID
		///3 道具效果ID
		/// </summary>
		public int Condition = 0; 
		
		/// <summary> 
		/// 升级消耗
		///金币消耗
		/// </summary>
		public int GoldConsume = 0; 
		
		/// <summary> 
		/// 升级消耗
		///道具消耗
		/// </summary>
		public int PropsConsume = 0; 
		
		/// <summary> 
		/// 技能ID
		/// </summary>
		public int SkillsId = 0; 
	
	

	} 

}
