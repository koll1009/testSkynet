// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: PropConfig
	
	public partial class PropConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// PropConfig
		/// </summary>
		public List<PropConfigDefine> Datas = new List<PropConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<string, PropConfigDefine> _ByID = new Dictionary<string, PropConfigDefine>();
        public PropConfigDefine GetByID(string ID, PropConfigDefine def = default(PropConfigDefine))
        {
            PropConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(PropConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( PropConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<PropConfig> _PropConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<PropConfig> PropConfigDeserializeHandler
		{
			get
			{
				if (_PropConfigDeserializeHandler == null )
				{
					_PropConfigDeserializeHandler = new tabtoy.DeserializeHandler<PropConfig>(Deserialize);
				}

				return _PropConfigDeserializeHandler;
			}
		}
		public static void Deserialize( PropConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<PropConfigDefine>(PropConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build PropConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( PropConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<PropConfigDefine> _PropConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<PropConfigDefine> PropConfigDefineDeserializeHandler
		{
			get
			{
				if (_PropConfigDefineDeserializeHandler == null )
				{
					_PropConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<PropConfigDefine>(Deserialize);
				}

				return _PropConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( PropConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.ID = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Model = reader.ReadString();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Quality = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Superposition = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.SubType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.UseJob = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.UseLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x5000a:
                	{
						ins.Cd = reader.ReadFloat();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.DayUseTimes = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.WeekUseTimes = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.DurableValue = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.ValidTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.UseNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x60010:
                	{
						ins.UseArea = reader.ReadString();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.Consumables = reader.ReadInt32();
                	}
                	break; 
                	case 0x10012:
                	{
						ins.Destroy = reader.ReadInt32();
                	}
                	break; 
                	case 0x10013:
                	{
						ins.Trading = reader.ReadInt32();
                	}
                	break; 
                	case 0x10014:
                	{
						ins.Synthetic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10015:
                	{
						ins.Decompose = reader.ReadInt32();
                	}
                	break; 
                	case 0x10016:
                	{
						ins.Binding = reader.ReadInt32();
                	}
                	break; 
                	case 0x10017:
                	{
						ins.PackLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x10018:
                	{
						ins.ItemValue = reader.ReadInt32();
                	}
                	break; 
                	case 0x10019:
                	{
						ins.SoldCost = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001a:
                	{
						ins.PorpEffect = reader.ReadInt32();
                	}
                	break; 
                	case 0x6001b:
                	{
						ins.EffectParameters = reader.ReadString();
                	}
                	break; 
                	case 0x6001c:
                	{
						ins.PropTips = reader.ReadString();
                	}
                	break; 
                	case 0x6001d:
                	{
						ins.PropAccess = reader.ReadString();
                	}
                	break; 
                	case 0x6001e:
                	{
						ins.UseWay = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: PropConfigDefine
	[System.Serializable]
	public partial class PropConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID（索引加MakeIndex:true）
		/// </summary>
		public string ID = ""; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// ICON
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 模型
		/// </summary>
		public string Model = ""; 
		
		/// <summary> 
		/// 品质
		///1普通
		///2高级
		///3稀有
		///4神器
		///5传说
		///6史诗
		/// </summary>
		public int Quality = 0; 
		
		/// <summary> 
		/// 叠加上限
		/// </summary>
		public int Superposition = 0; 
		
		/// <summary> 
		/// 类型
		///1.消耗品
		///2.材料
		///3.任务
		///4.装备
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 子类型
		///101药剂，102食物，103礼盒，104其他类
		///201宝石，202卡片，203入场券，204素材
		///401武器，402头饰，403上衣，404手饰，405裤子，406鞋子，407手镯，408项链，409戒指，410魔法石，411耳环，412称号
		/// </summary>
		public int SubType = 0; 
		
		/// <summary> 
		/// 职业
		///0-通用
		///1-狂剑士
		///2-神射手
		///3-守护者
		///4-魔导师
		///5-圣职者
		/// </summary>
		public int UseJob = 0; 
		
		/// <summary> 
		/// 职业等级
		///注：最小值为1
		/// </summary>
		public int UseLevel = 0; 
		
		/// <summary> 
		/// 冷却时间
		///（秒）
		/// </summary>
		public float Cd = 0f; 
		
		/// <summary> 
		/// 每日使用
		///0则为没有使用次数限制
		/// </summary>
		public int DayUseTimes = 0; 
		
		/// <summary> 
		/// 每周使用
		///0则为没有使用次数限制
		/// </summary>
		public int WeekUseTimes = 0; 
		
		/// <summary> 
		/// 耐久度
		///0为无限耐久
		/// </summary>
		public int DurableValue = 0; 
		
		/// <summary> 
		/// 时效性
		///（秒）
		///注：0表示为无时限
		/// </summary>
		public int ValidTime = 0; 
		
		/// <summary> 
		/// 可使用次数
		///注：最小值为1
		/// </summary>
		public int UseNumber = 0; 
		
		/// <summary> 
		/// 可使用区域
		///注：0表示不限使用区域
		/// </summary>
		public string UseArea = ""; 
		
		/// <summary> 
		/// 使用消耗道具
		///填道具ID
		/// </summary>
		public int Consumables = 0; 
		
		/// <summary> 
		/// 销毁
		///0 否
		///1 是
		/// </summary>
		public int Destroy = 0; 
		
		/// <summary> 
		/// 交易
		///0 否
		///1 是
		/// </summary>
		public int Trading = 0; 
		
		/// <summary> 
		/// 合成
		///0 否
		///1 是
		/// </summary>
		public int Synthetic = 0; 
		
		/// <summary> 
		/// 分解
		///0 否
		///1 是
		/// </summary>
		public int Decompose = 0; 
		
		/// <summary> 
		/// 绑定
		///0 否
		///1 是
		/// </summary>
		public int Binding = 0; 
		
		/// <summary> 
		/// 封装次数上限
		/// </summary>
		public int PackLimit = 0; 
		
		/// <summary> 
		/// 道具价值
		///（金币）
		/// </summary>
		public int ItemValue = 0; 
		
		/// <summary> 
		/// 出售价格
		///（金币）
		///注：出售价格为0表示不可出售
		/// </summary>
		public int SoldCost = 0; 
		
		/// <summary> 
		/// 道具效果
		///1 装备属性
		///2 获得效果
		///3 触发事件
		///4 普通礼盒
		///5 多选一礼盒
		///6 材料属性
		/// </summary>
		public int PorpEffect = 0; 
		
		/// <summary> 
		/// 效果参数
		///1 填装备表ID
		///2 填技能ID
		///3 填事件表ID
		///4 填单次掉落ID|填10连掉落ID
		///5 填掉落表ID
		///6 填材料属性表ID
		/// </summary>
		public string EffectParameters = ""; 
		
		/// <summary> 
		/// 道具描述
		///<color=#303030>+文字描述+</color>
		///\n是换行
		///注：尽量不超过50个字
		/// </summary>
		public string PropTips = ""; 
		
		/// <summary> 
		/// 获得途径
		/// </summary>
		public string PropAccess = ""; 
		
		/// <summary> 
		/// 使用途径
		/// </summary>
		public string UseWay = ""; 
	
	

	} 

}
