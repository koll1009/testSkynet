// Generated by tabtoy
// Version: 2.8.11
// DO NOT EDIT!!
using System.Collections.Generic;

namespace NasData
{
	
	

	// Defined in table: SkillAnimConfig
	
	public partial class SkillAnimConfig : tabtoy._BaseConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// SkillAnimConfig
		/// </summary>
		public List<SkillAnimConfigDefine> Datas = new List<SkillAnimConfigDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, SkillAnimConfigDefine> _ByID = new Dictionary<int, SkillAnimConfigDefine>();
        public SkillAnimConfigDefine GetByID(int ID, SkillAnimConfigDefine def = default(SkillAnimConfigDefine))
        {
            SkillAnimConfigDefine ret;
            if ( _ByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SkillAnimConfigDefine) )
			{
				TableLogger.ErrorLine("GetByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		public override void Deserialize(System.IO.Stream stream)
        {
            Deserialize(this, stream);
        }
		
		public static void Deserialize( SkillAnimConfig ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<SkillAnimConfig> _SkillAnimConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillAnimConfig> SkillAnimConfigDeserializeHandler
		{
			get
			{
				if (_SkillAnimConfigDeserializeHandler == null )
				{
					_SkillAnimConfigDeserializeHandler = new tabtoy.DeserializeHandler<SkillAnimConfig>(Deserialize);
				}

				return _SkillAnimConfigDeserializeHandler;
			}
		}
		public static void Deserialize( SkillAnimConfig ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Datas.Add( reader.ReadStruct<SkillAnimConfigDefine>(SkillAnimConfigDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build SkillAnimConfig Index
			for( int i = 0;i< ins.Datas.Count;i++)
			{
				var element = ins.Datas[i];
				
				ins._ByID.Add(element.ID, element);
				
			}
			
		}
		public static void Deserialize( SkillAnimConfigDefine ins, System.IO.Stream stream )
        {
            tabtoy.DataReader reader = new tabtoy.DataReader(stream);
            if (!reader.ReadHeader())
            {
                throw new System.Exception(string.Format("Deserialize failed: {0}", ins.GetType()));
            }
            Deserialize(ins, reader);
        }
		static tabtoy.DeserializeHandler<SkillAnimConfigDefine> _SkillAnimConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillAnimConfigDefine> SkillAnimConfigDefineDeserializeHandler
		{
			get
			{
				if (_SkillAnimConfigDefineDeserializeHandler == null )
				{
					_SkillAnimConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillAnimConfigDefine>(Deserialize);
				}

				return _SkillAnimConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SkillAnimConfigDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Ctrl = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.ActionID = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.CastingEnter = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Casting = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.CastingExit = reader.ReadString();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.InstantEnter = reader.ReadString();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.Instant = reader.ReadString();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.LastingEnter = reader.ReadString();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.Lasting = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.LastingExit = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: SkillAnimConfigDefine
	[System.Serializable]
	public partial class SkillAnimConfigDefine : tabtoy._BaseConfig
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 技能动作类
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 动作组编号
		///引用情况
		///职业表：动作组ID
		///怪物表：动作组ID
		/// </summary>
		public string Ctrl = ""; 
		
		/// <summary> 
		/// 动作编号
		///引用情况
		///技能表：动作编号
		/// </summary>
		public string ActionID = ""; 
		
		/// <summary> 
		/// 咏唱前置
		/// </summary>
		public string CastingEnter = ""; 
		
		/// <summary> 
		/// 咏唱
		/// </summary>
		public string Casting = ""; 
		
		/// <summary> 
		/// 咏唱后置
		/// </summary>
		public string CastingExit = ""; 
		
		/// <summary> 
		/// 瞬发前置
		/// </summary>
		public string InstantEnter = ""; 
		
		/// <summary> 
		/// 瞬发
		/// </summary>
		public string Instant = ""; 
		
		/// <summary> 
		/// 持续前置
		/// </summary>
		public string LastingEnter = ""; 
		
		/// <summary> 
		/// 持续
		/// </summary>
		public string Lasting = ""; 
		
		/// <summary> 
		/// 持续后置
		/// </summary>
		public string LastingExit = ""; 
	
	

	} 

}
